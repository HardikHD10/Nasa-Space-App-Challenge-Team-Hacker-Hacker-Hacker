{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1_93lbApkdOCuKcKRmX6LC08VPXVo5QeF","timestamp":1696742653804}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UGUfaNrZWc27","executionInfo":{"status":"ok","timestamp":1696744810030,"user_tz":-330,"elapsed":31040,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"6e20c6ae-f4ad-4d7b-f94c-0edf6fda6487"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"xSAACY4UYhNM","executionInfo":{"status":"ok","timestamp":1696744810031,"user_tz":-330,"elapsed":9,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv(\"/content/drive/MyDrive/SpaceApp/hourwise_dataset.csv\")"],"metadata":{"id":"M_TuRDOpWs-6","executionInfo":{"status":"ok","timestamp":1696744810794,"user_tz":-330,"elapsed":769,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Basic Libraries\n","import numpy as np\n","import pandas as pd\n","\n","# Data Visualization Libraries\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from bokeh.plotting import figure, show\n","from bokeh.io import output_notebook\n","import missingno as msno\n","\n","# Preprocessing and Feature Selection\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","from sklearn.feature_selection import SelectKBest, f_classif, chi2\n","\n","# Deep Learning Libraries\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, LSTM, Dropout\n","from tensorflow.keras.layers import Dropout, BatchNormalization\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.regularizers import l1, l2\n","\n","# Metrics for Model Evaluation\n","from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error, mean_absolute_percentage_error"],"metadata":{"id":"NOFvhSpgublJ","executionInfo":{"status":"ok","timestamp":1696745908811,"user_tz":-330,"elapsed":8,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrdDow4zYr_k","executionInfo":{"status":"ok","timestamp":1696744810795,"user_tz":-330,"elapsed":17,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"5dc15d33-329d-4d3b-9eae-bf3e76710461"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Date', 'Time', 'Datetime', 'Source', 'Bt-med', 'Bt-min', 'Bt-max',\n","       'Bx-med', 'Bx-min', 'Bx-max', 'By-med', 'By-min', 'By-max', 'Bz-med',\n","       'Bz-min', 'Bz-max', 'Phi-mean', 'Phi-min', 'Phi-max', 'Theta-med',\n","       'Theta-min', 'Theta-max', 'Dens-med', 'Dens-min', 'Dens-max',\n","       'Speed-med', 'Speed-min', 'Speed-max', 'Temp-med', 'Temp-min',\n","       'Temp-max', 'SN', 'F10.7obs', 'F10.7adj', 'ap_value', 'Kp_value'],\n","      dtype='object')"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":808},"id":"P3wDih0wY1Ve","executionInfo":{"status":"ok","timestamp":1696744811668,"user_tz":-330,"elapsed":884,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"3b1ea46a-79fc-465a-e425-0318750c1d82"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date      Time             Datetime  Source  Bt-med  Bt-min  \\\n","0     2023-08-17  00:00:00  2023-08-17 00:00:00       1    7.89    7.21   \n","1     2023-08-17  01:00:00  2023-08-17 01:00:00       1    7.44    6.78   \n","2     2023-08-17  02:00:00  2023-08-17 02:00:00       1    5.86    5.41   \n","3     2023-08-17  03:00:00  2023-08-17 03:00:00       1    6.40    4.40   \n","4     2023-08-17  04:00:00  2023-08-17 04:00:00       1    7.24    5.17   \n","...          ...       ...                  ...     ...     ...     ...   \n","1233  2023-10-07  09:00:00  2023-10-07 09:00:00       1    5.60    5.41   \n","1234  2023-10-07  10:00:00  2023-10-07 10:00:00       1    5.32    5.09   \n","1235  2023-10-07  11:00:00  2023-10-07 11:00:00       1    5.36    5.21   \n","1236  2023-10-07  12:00:00  2023-10-07 12:00:00       1    5.55    5.31   \n","1237  2023-10-07  13:00:00  2023-10-07 13:00:00       1    5.65    5.45   \n","\n","      Bt-max  Bx-med  Bx-min  Bx-max  ...  Speed-min  Speed-max  Temp-med  \\\n","0       8.66   -0.52   -3.56    0.57  ...      303.7      315.4     16786   \n","1       8.34   -2.78   -3.86   -0.63  ...      311.4      316.8     12555   \n","2       7.00   -1.94   -3.24   -0.14  ...      307.2      322.6     17006   \n","3       7.56   -0.84   -4.08    3.91  ...      298.8      317.2     28372   \n","4       7.67   -1.80   -2.70   -1.09  ...      313.6      326.3     20563   \n","...      ...     ...     ...     ...  ...        ...        ...       ...   \n","1233    5.75   -1.38   -1.73   -1.02  ...      400.9      441.8    327364   \n","1234    5.64    0.10   -1.13    0.61  ...      350.1      443.0    180254   \n","1235    5.41   -0.06   -1.18    0.34  ...      353.8      477.4    168396   \n","1236    5.73   -1.06   -2.22   -0.29  ...      354.0      478.3    182189   \n","1237    5.78   -0.94   -2.30   -0.45  ...      438.2      480.3    186108   \n","\n","      Temp-min  Temp-max     SN  F10.7obs  F10.7adj  ap_value  Kp_value  \n","0        12124     19425  146.0     151.9     155.7         9     2.333  \n","1        10256     16625  146.0     151.9     155.7         9     2.333  \n","2        14398     27957  146.0     151.9     155.7         0     1.000  \n","3        20008     40698  146.0     151.9     155.7         6     1.667  \n","4        16439     25790  146.0     151.9     155.7         6     1.667  \n","...        ...       ...    ...       ...       ...       ...       ...  \n","1233    150079    336855    NaN       NaN       NaN         0     0.000  \n","1234     13068    336487    NaN       NaN       NaN         0     0.000  \n","1235     13581    213827    NaN       NaN       NaN         0     0.000  \n","1236      5000    200321    NaN       NaN       NaN         0     0.000  \n","1237     92265    197999    NaN       NaN       NaN         0     0.000  \n","\n","[1238 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-f4eaf627-8ee7-4082-992c-c3df58e86ee2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Datetime</th>\n","      <th>Source</th>\n","      <th>Bt-med</th>\n","      <th>Bt-min</th>\n","      <th>Bt-max</th>\n","      <th>Bx-med</th>\n","      <th>Bx-min</th>\n","      <th>Bx-max</th>\n","      <th>...</th>\n","      <th>Speed-min</th>\n","      <th>Speed-max</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>F10.7obs</th>\n","      <th>F10.7adj</th>\n","      <th>ap_value</th>\n","      <th>Kp_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-08-17</td>\n","      <td>00:00:00</td>\n","      <td>2023-08-17 00:00:00</td>\n","      <td>1</td>\n","      <td>7.89</td>\n","      <td>7.21</td>\n","      <td>8.66</td>\n","      <td>-0.52</td>\n","      <td>-3.56</td>\n","      <td>0.57</td>\n","      <td>...</td>\n","      <td>303.7</td>\n","      <td>315.4</td>\n","      <td>16786</td>\n","      <td>12124</td>\n","      <td>19425</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-08-17</td>\n","      <td>01:00:00</td>\n","      <td>2023-08-17 01:00:00</td>\n","      <td>1</td>\n","      <td>7.44</td>\n","      <td>6.78</td>\n","      <td>8.34</td>\n","      <td>-2.78</td>\n","      <td>-3.86</td>\n","      <td>-0.63</td>\n","      <td>...</td>\n","      <td>311.4</td>\n","      <td>316.8</td>\n","      <td>12555</td>\n","      <td>10256</td>\n","      <td>16625</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-08-17</td>\n","      <td>02:00:00</td>\n","      <td>2023-08-17 02:00:00</td>\n","      <td>1</td>\n","      <td>5.86</td>\n","      <td>5.41</td>\n","      <td>7.00</td>\n","      <td>-1.94</td>\n","      <td>-3.24</td>\n","      <td>-0.14</td>\n","      <td>...</td>\n","      <td>307.2</td>\n","      <td>322.6</td>\n","      <td>17006</td>\n","      <td>14398</td>\n","      <td>27957</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>0</td>\n","      <td>1.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-08-17</td>\n","      <td>03:00:00</td>\n","      <td>2023-08-17 03:00:00</td>\n","      <td>1</td>\n","      <td>6.40</td>\n","      <td>4.40</td>\n","      <td>7.56</td>\n","      <td>-0.84</td>\n","      <td>-4.08</td>\n","      <td>3.91</td>\n","      <td>...</td>\n","      <td>298.8</td>\n","      <td>317.2</td>\n","      <td>28372</td>\n","      <td>20008</td>\n","      <td>40698</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-08-17</td>\n","      <td>04:00:00</td>\n","      <td>2023-08-17 04:00:00</td>\n","      <td>1</td>\n","      <td>7.24</td>\n","      <td>5.17</td>\n","      <td>7.67</td>\n","      <td>-1.80</td>\n","      <td>-2.70</td>\n","      <td>-1.09</td>\n","      <td>...</td>\n","      <td>313.6</td>\n","      <td>326.3</td>\n","      <td>20563</td>\n","      <td>16439</td>\n","      <td>25790</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1233</th>\n","      <td>2023-10-07</td>\n","      <td>09:00:00</td>\n","      <td>2023-10-07 09:00:00</td>\n","      <td>1</td>\n","      <td>5.60</td>\n","      <td>5.41</td>\n","      <td>5.75</td>\n","      <td>-1.38</td>\n","      <td>-1.73</td>\n","      <td>-1.02</td>\n","      <td>...</td>\n","      <td>400.9</td>\n","      <td>441.8</td>\n","      <td>327364</td>\n","      <td>150079</td>\n","      <td>336855</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1234</th>\n","      <td>2023-10-07</td>\n","      <td>10:00:00</td>\n","      <td>2023-10-07 10:00:00</td>\n","      <td>1</td>\n","      <td>5.32</td>\n","      <td>5.09</td>\n","      <td>5.64</td>\n","      <td>0.10</td>\n","      <td>-1.13</td>\n","      <td>0.61</td>\n","      <td>...</td>\n","      <td>350.1</td>\n","      <td>443.0</td>\n","      <td>180254</td>\n","      <td>13068</td>\n","      <td>336487</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1235</th>\n","      <td>2023-10-07</td>\n","      <td>11:00:00</td>\n","      <td>2023-10-07 11:00:00</td>\n","      <td>1</td>\n","      <td>5.36</td>\n","      <td>5.21</td>\n","      <td>5.41</td>\n","      <td>-0.06</td>\n","      <td>-1.18</td>\n","      <td>0.34</td>\n","      <td>...</td>\n","      <td>353.8</td>\n","      <td>477.4</td>\n","      <td>168396</td>\n","      <td>13581</td>\n","      <td>213827</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1236</th>\n","      <td>2023-10-07</td>\n","      <td>12:00:00</td>\n","      <td>2023-10-07 12:00:00</td>\n","      <td>1</td>\n","      <td>5.55</td>\n","      <td>5.31</td>\n","      <td>5.73</td>\n","      <td>-1.06</td>\n","      <td>-2.22</td>\n","      <td>-0.29</td>\n","      <td>...</td>\n","      <td>354.0</td>\n","      <td>478.3</td>\n","      <td>182189</td>\n","      <td>5000</td>\n","      <td>200321</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1237</th>\n","      <td>2023-10-07</td>\n","      <td>13:00:00</td>\n","      <td>2023-10-07 13:00:00</td>\n","      <td>1</td>\n","      <td>5.65</td>\n","      <td>5.45</td>\n","      <td>5.78</td>\n","      <td>-0.94</td>\n","      <td>-2.30</td>\n","      <td>-0.45</td>\n","      <td>...</td>\n","      <td>438.2</td>\n","      <td>480.3</td>\n","      <td>186108</td>\n","      <td>92265</td>\n","      <td>197999</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1238 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4eaf627-8ee7-4082-992c-c3df58e86ee2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4eaf627-8ee7-4082-992c-c3df58e86ee2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4eaf627-8ee7-4082-992c-c3df58e86ee2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2e7651d1-f6b3-41a3-a543-69fc69fce600\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e7651d1-f6b3-41a3-a543-69fc69fce600')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2e7651d1-f6b3-41a3-a543-69fc69fce600 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NRXa_W9Wfhp0","executionInfo":{"status":"ok","timestamp":1696744811669,"user_tz":-330,"elapsed":33,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"205be2a7-19d3-443a-9e55-0771978c54d1"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date          0\n","Time          0\n","Datetime      0\n","Source        0\n","Bt-med        0\n","Bt-min        0\n","Bt-max        0\n","Bx-med        0\n","Bx-min        0\n","Bx-max        0\n","By-med        0\n","By-min        0\n","By-max        0\n","Bz-med        0\n","Bz-min        0\n","Bz-max        0\n","Phi-mean      0\n","Phi-min       0\n","Phi-max       0\n","Theta-med     0\n","Theta-min     0\n","Theta-max     0\n","Dens-med      0\n","Dens-min      0\n","Dens-max      0\n","Speed-med     0\n","Speed-min     0\n","Speed-max     0\n","Temp-med      0\n","Temp-min      0\n","Temp-max      0\n","SN           14\n","F10.7obs     14\n","F10.7adj     14\n","ap_value      0\n","Kp_value      0\n","dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":808},"id":"W4mcP1LSkCWC","executionInfo":{"status":"ok","timestamp":1696744860453,"user_tz":-330,"elapsed":663,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"ab78bc3d-806a-44ea-ccbe-39775af129f6"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date      Time             Datetime  Source  Bt-med  Bt-min  \\\n","0     2023-08-17  00:00:00  2023-08-17 00:00:00       1    7.89    7.21   \n","1     2023-08-17  01:00:00  2023-08-17 01:00:00       1    7.44    6.78   \n","2     2023-08-17  02:00:00  2023-08-17 02:00:00       1    5.86    5.41   \n","3     2023-08-17  03:00:00  2023-08-17 03:00:00       1    6.40    4.40   \n","4     2023-08-17  04:00:00  2023-08-17 04:00:00       1    7.24    5.17   \n","...          ...       ...                  ...     ...     ...     ...   \n","1233  2023-10-07  09:00:00  2023-10-07 09:00:00       1    5.60    5.41   \n","1234  2023-10-07  10:00:00  2023-10-07 10:00:00       1    5.32    5.09   \n","1235  2023-10-07  11:00:00  2023-10-07 11:00:00       1    5.36    5.21   \n","1236  2023-10-07  12:00:00  2023-10-07 12:00:00       1    5.55    5.31   \n","1237  2023-10-07  13:00:00  2023-10-07 13:00:00       1    5.65    5.45   \n","\n","      Bt-max  Bx-med  Bx-min  Bx-max  ...  Speed-min  Speed-max  Temp-med  \\\n","0       8.66   -0.52   -3.56    0.57  ...      303.7      315.4     16786   \n","1       8.34   -2.78   -3.86   -0.63  ...      311.4      316.8     12555   \n","2       7.00   -1.94   -3.24   -0.14  ...      307.2      322.6     17006   \n","3       7.56   -0.84   -4.08    3.91  ...      298.8      317.2     28372   \n","4       7.67   -1.80   -2.70   -1.09  ...      313.6      326.3     20563   \n","...      ...     ...     ...     ...  ...        ...        ...       ...   \n","1233    5.75   -1.38   -1.73   -1.02  ...      400.9      441.8    327364   \n","1234    5.64    0.10   -1.13    0.61  ...      350.1      443.0    180254   \n","1235    5.41   -0.06   -1.18    0.34  ...      353.8      477.4    168396   \n","1236    5.73   -1.06   -2.22   -0.29  ...      354.0      478.3    182189   \n","1237    5.78   -0.94   -2.30   -0.45  ...      438.2      480.3    186108   \n","\n","      Temp-min  Temp-max     SN  F10.7obs  F10.7adj  ap_value  Kp_value  \n","0        12124     19425  146.0     151.9     155.7         9     2.333  \n","1        10256     16625  146.0     151.9     155.7         9     2.333  \n","2        14398     27957  146.0     151.9     155.7         0     1.000  \n","3        20008     40698  146.0     151.9     155.7         6     1.667  \n","4        16439     25790  146.0     151.9     155.7         6     1.667  \n","...        ...       ...    ...       ...       ...       ...       ...  \n","1233    150079    336855    NaN       NaN       NaN         0     0.000  \n","1234     13068    336487    NaN       NaN       NaN         0     0.000  \n","1235     13581    213827    NaN       NaN       NaN         0     0.000  \n","1236      5000    200321    NaN       NaN       NaN         0     0.000  \n","1237     92265    197999    NaN       NaN       NaN         0     0.000  \n","\n","[1238 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-fdd0a7b5-4f1e-4999-beae-8854c82b3e13\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Datetime</th>\n","      <th>Source</th>\n","      <th>Bt-med</th>\n","      <th>Bt-min</th>\n","      <th>Bt-max</th>\n","      <th>Bx-med</th>\n","      <th>Bx-min</th>\n","      <th>Bx-max</th>\n","      <th>...</th>\n","      <th>Speed-min</th>\n","      <th>Speed-max</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>F10.7obs</th>\n","      <th>F10.7adj</th>\n","      <th>ap_value</th>\n","      <th>Kp_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-08-17</td>\n","      <td>00:00:00</td>\n","      <td>2023-08-17 00:00:00</td>\n","      <td>1</td>\n","      <td>7.89</td>\n","      <td>7.21</td>\n","      <td>8.66</td>\n","      <td>-0.52</td>\n","      <td>-3.56</td>\n","      <td>0.57</td>\n","      <td>...</td>\n","      <td>303.7</td>\n","      <td>315.4</td>\n","      <td>16786</td>\n","      <td>12124</td>\n","      <td>19425</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-08-17</td>\n","      <td>01:00:00</td>\n","      <td>2023-08-17 01:00:00</td>\n","      <td>1</td>\n","      <td>7.44</td>\n","      <td>6.78</td>\n","      <td>8.34</td>\n","      <td>-2.78</td>\n","      <td>-3.86</td>\n","      <td>-0.63</td>\n","      <td>...</td>\n","      <td>311.4</td>\n","      <td>316.8</td>\n","      <td>12555</td>\n","      <td>10256</td>\n","      <td>16625</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-08-17</td>\n","      <td>02:00:00</td>\n","      <td>2023-08-17 02:00:00</td>\n","      <td>1</td>\n","      <td>5.86</td>\n","      <td>5.41</td>\n","      <td>7.00</td>\n","      <td>-1.94</td>\n","      <td>-3.24</td>\n","      <td>-0.14</td>\n","      <td>...</td>\n","      <td>307.2</td>\n","      <td>322.6</td>\n","      <td>17006</td>\n","      <td>14398</td>\n","      <td>27957</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>0</td>\n","      <td>1.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-08-17</td>\n","      <td>03:00:00</td>\n","      <td>2023-08-17 03:00:00</td>\n","      <td>1</td>\n","      <td>6.40</td>\n","      <td>4.40</td>\n","      <td>7.56</td>\n","      <td>-0.84</td>\n","      <td>-4.08</td>\n","      <td>3.91</td>\n","      <td>...</td>\n","      <td>298.8</td>\n","      <td>317.2</td>\n","      <td>28372</td>\n","      <td>20008</td>\n","      <td>40698</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-08-17</td>\n","      <td>04:00:00</td>\n","      <td>2023-08-17 04:00:00</td>\n","      <td>1</td>\n","      <td>7.24</td>\n","      <td>5.17</td>\n","      <td>7.67</td>\n","      <td>-1.80</td>\n","      <td>-2.70</td>\n","      <td>-1.09</td>\n","      <td>...</td>\n","      <td>313.6</td>\n","      <td>326.3</td>\n","      <td>20563</td>\n","      <td>16439</td>\n","      <td>25790</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1233</th>\n","      <td>2023-10-07</td>\n","      <td>09:00:00</td>\n","      <td>2023-10-07 09:00:00</td>\n","      <td>1</td>\n","      <td>5.60</td>\n","      <td>5.41</td>\n","      <td>5.75</td>\n","      <td>-1.38</td>\n","      <td>-1.73</td>\n","      <td>-1.02</td>\n","      <td>...</td>\n","      <td>400.9</td>\n","      <td>441.8</td>\n","      <td>327364</td>\n","      <td>150079</td>\n","      <td>336855</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1234</th>\n","      <td>2023-10-07</td>\n","      <td>10:00:00</td>\n","      <td>2023-10-07 10:00:00</td>\n","      <td>1</td>\n","      <td>5.32</td>\n","      <td>5.09</td>\n","      <td>5.64</td>\n","      <td>0.10</td>\n","      <td>-1.13</td>\n","      <td>0.61</td>\n","      <td>...</td>\n","      <td>350.1</td>\n","      <td>443.0</td>\n","      <td>180254</td>\n","      <td>13068</td>\n","      <td>336487</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1235</th>\n","      <td>2023-10-07</td>\n","      <td>11:00:00</td>\n","      <td>2023-10-07 11:00:00</td>\n","      <td>1</td>\n","      <td>5.36</td>\n","      <td>5.21</td>\n","      <td>5.41</td>\n","      <td>-0.06</td>\n","      <td>-1.18</td>\n","      <td>0.34</td>\n","      <td>...</td>\n","      <td>353.8</td>\n","      <td>477.4</td>\n","      <td>168396</td>\n","      <td>13581</td>\n","      <td>213827</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1236</th>\n","      <td>2023-10-07</td>\n","      <td>12:00:00</td>\n","      <td>2023-10-07 12:00:00</td>\n","      <td>1</td>\n","      <td>5.55</td>\n","      <td>5.31</td>\n","      <td>5.73</td>\n","      <td>-1.06</td>\n","      <td>-2.22</td>\n","      <td>-0.29</td>\n","      <td>...</td>\n","      <td>354.0</td>\n","      <td>478.3</td>\n","      <td>182189</td>\n","      <td>5000</td>\n","      <td>200321</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1237</th>\n","      <td>2023-10-07</td>\n","      <td>13:00:00</td>\n","      <td>2023-10-07 13:00:00</td>\n","      <td>1</td>\n","      <td>5.65</td>\n","      <td>5.45</td>\n","      <td>5.78</td>\n","      <td>-0.94</td>\n","      <td>-2.30</td>\n","      <td>-0.45</td>\n","      <td>...</td>\n","      <td>438.2</td>\n","      <td>480.3</td>\n","      <td>186108</td>\n","      <td>92265</td>\n","      <td>197999</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1238 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdd0a7b5-4f1e-4999-beae-8854c82b3e13')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fdd0a7b5-4f1e-4999-beae-8854c82b3e13 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fdd0a7b5-4f1e-4999-beae-8854c82b3e13');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3dd3a91a-c472-49a1-b6f6-c3a7f250b5f6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3dd3a91a-c472-49a1-b6f6-c3a7f250b5f6')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3dd3a91a-c472-49a1-b6f6-c3a7f250b5f6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Assuming df is your DataFrame\n","# Replace outliers with median for each column\n","for column in data.columns:\n","    if data[column].dtype in ['float64', 'int64']:  # Check if the column is numeric\n","        Q1 = data[column].quantile(0.25)\n","        Q3 = data[column].quantile(0.75)\n","        IQR = Q3 - Q1\n","\n","        # Define the lower and upper bounds for outliers\n","        lower_bound = Q1 - 1.5 * IQR\n","        upper_bound = Q3 + 1.5 * IQR\n","\n","        # Replace outliers with median\n","        data[column] = np.where((data[column] < lower_bound) | (data[column] > upper_bound),\n","                              data[column].median(), data[column])"],"metadata":{"id":"1ErOhBrmY4h8","executionInfo":{"status":"ok","timestamp":1696744861058,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":808},"id":"6ELa_H-UZA_U","executionInfo":{"status":"ok","timestamp":1696744862636,"user_tz":-330,"elapsed":16,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"0b27878c-5657-46f4-f468-805e98315212"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date      Time             Datetime  Source  Bt-med  Bt-min  \\\n","0     2023-08-17  00:00:00  2023-08-17 00:00:00     1.0    7.89    7.21   \n","1     2023-08-17  01:00:00  2023-08-17 01:00:00     1.0    7.44    6.78   \n","2     2023-08-17  02:00:00  2023-08-17 02:00:00     1.0    5.86    5.41   \n","3     2023-08-17  03:00:00  2023-08-17 03:00:00     1.0    6.40    4.40   \n","4     2023-08-17  04:00:00  2023-08-17 04:00:00     1.0    7.24    5.17   \n","...          ...       ...                  ...     ...     ...     ...   \n","1233  2023-10-07  09:00:00  2023-10-07 09:00:00     1.0    5.60    5.41   \n","1234  2023-10-07  10:00:00  2023-10-07 10:00:00     1.0    5.32    5.09   \n","1235  2023-10-07  11:00:00  2023-10-07 11:00:00     1.0    5.36    5.21   \n","1236  2023-10-07  12:00:00  2023-10-07 12:00:00     1.0    5.55    5.31   \n","1237  2023-10-07  13:00:00  2023-10-07 13:00:00     1.0    5.65    5.45   \n","\n","      Bt-max  Bx-med  Bx-min  Bx-max  ...  Speed-min  Speed-max  Temp-med  \\\n","0       8.66   -0.52   -3.56    0.57  ...      303.7      315.4   16786.0   \n","1       8.34   -2.78   -3.86   -0.63  ...      311.4      316.8   12555.0   \n","2       7.00   -1.94   -3.24   -0.14  ...      307.2      322.6   17006.0   \n","3       7.56   -0.84   -4.08    3.91  ...      298.8      317.2   28372.0   \n","4       7.67   -1.80   -2.70   -1.09  ...      313.6      326.3   20563.0   \n","...      ...     ...     ...     ...  ...        ...        ...       ...   \n","1233    5.75   -1.38   -1.73   -1.02  ...      400.9      441.8  327364.0   \n","1234    5.64    0.10   -1.13    0.61  ...      350.1      443.0  180254.0   \n","1235    5.41   -0.06   -1.18    0.34  ...      353.8      477.4  168396.0   \n","1236    5.73   -1.06   -2.22   -0.29  ...      354.0      478.3  182189.0   \n","1237    5.78   -0.94   -2.30   -0.45  ...      438.2      480.3  186108.0   \n","\n","      Temp-min  Temp-max     SN  F10.7obs  F10.7adj  ap_value  Kp_value  \n","0      12124.0   19425.0  146.0     151.9     155.7       9.0     2.333  \n","1      10256.0   16625.0  146.0     151.9     155.7       9.0     2.333  \n","2      14398.0   27957.0  146.0     151.9     155.7       0.0     1.000  \n","3      20008.0   40698.0  146.0     151.9     155.7       6.0     1.667  \n","4      16439.0   25790.0  146.0     151.9     155.7       6.0     1.667  \n","...        ...       ...    ...       ...       ...       ...       ...  \n","1233  150079.0  336855.0    NaN       NaN       NaN       0.0     0.000  \n","1234   13068.0  336487.0    NaN       NaN       NaN       0.0     0.000  \n","1235   13581.0  213827.0    NaN       NaN       NaN       0.0     0.000  \n","1236    5000.0  200321.0    NaN       NaN       NaN       0.0     0.000  \n","1237   92265.0  197999.0    NaN       NaN       NaN       0.0     0.000  \n","\n","[1238 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-46765dd0-0d98-4d6e-bd88-4ebe723d6842\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Datetime</th>\n","      <th>Source</th>\n","      <th>Bt-med</th>\n","      <th>Bt-min</th>\n","      <th>Bt-max</th>\n","      <th>Bx-med</th>\n","      <th>Bx-min</th>\n","      <th>Bx-max</th>\n","      <th>...</th>\n","      <th>Speed-min</th>\n","      <th>Speed-max</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>F10.7obs</th>\n","      <th>F10.7adj</th>\n","      <th>ap_value</th>\n","      <th>Kp_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2023-08-17</td>\n","      <td>00:00:00</td>\n","      <td>2023-08-17 00:00:00</td>\n","      <td>1.0</td>\n","      <td>7.89</td>\n","      <td>7.21</td>\n","      <td>8.66</td>\n","      <td>-0.52</td>\n","      <td>-3.56</td>\n","      <td>0.57</td>\n","      <td>...</td>\n","      <td>303.7</td>\n","      <td>315.4</td>\n","      <td>16786.0</td>\n","      <td>12124.0</td>\n","      <td>19425.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9.0</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2023-08-17</td>\n","      <td>01:00:00</td>\n","      <td>2023-08-17 01:00:00</td>\n","      <td>1.0</td>\n","      <td>7.44</td>\n","      <td>6.78</td>\n","      <td>8.34</td>\n","      <td>-2.78</td>\n","      <td>-3.86</td>\n","      <td>-0.63</td>\n","      <td>...</td>\n","      <td>311.4</td>\n","      <td>316.8</td>\n","      <td>12555.0</td>\n","      <td>10256.0</td>\n","      <td>16625.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9.0</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2023-08-17</td>\n","      <td>02:00:00</td>\n","      <td>2023-08-17 02:00:00</td>\n","      <td>1.0</td>\n","      <td>5.86</td>\n","      <td>5.41</td>\n","      <td>7.00</td>\n","      <td>-1.94</td>\n","      <td>-3.24</td>\n","      <td>-0.14</td>\n","      <td>...</td>\n","      <td>307.2</td>\n","      <td>322.6</td>\n","      <td>17006.0</td>\n","      <td>14398.0</td>\n","      <td>27957.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>0.0</td>\n","      <td>1.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2023-08-17</td>\n","      <td>03:00:00</td>\n","      <td>2023-08-17 03:00:00</td>\n","      <td>1.0</td>\n","      <td>6.40</td>\n","      <td>4.40</td>\n","      <td>7.56</td>\n","      <td>-0.84</td>\n","      <td>-4.08</td>\n","      <td>3.91</td>\n","      <td>...</td>\n","      <td>298.8</td>\n","      <td>317.2</td>\n","      <td>28372.0</td>\n","      <td>20008.0</td>\n","      <td>40698.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6.0</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2023-08-17</td>\n","      <td>04:00:00</td>\n","      <td>2023-08-17 04:00:00</td>\n","      <td>1.0</td>\n","      <td>7.24</td>\n","      <td>5.17</td>\n","      <td>7.67</td>\n","      <td>-1.80</td>\n","      <td>-2.70</td>\n","      <td>-1.09</td>\n","      <td>...</td>\n","      <td>313.6</td>\n","      <td>326.3</td>\n","      <td>20563.0</td>\n","      <td>16439.0</td>\n","      <td>25790.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6.0</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1233</th>\n","      <td>2023-10-07</td>\n","      <td>09:00:00</td>\n","      <td>2023-10-07 09:00:00</td>\n","      <td>1.0</td>\n","      <td>5.60</td>\n","      <td>5.41</td>\n","      <td>5.75</td>\n","      <td>-1.38</td>\n","      <td>-1.73</td>\n","      <td>-1.02</td>\n","      <td>...</td>\n","      <td>400.9</td>\n","      <td>441.8</td>\n","      <td>327364.0</td>\n","      <td>150079.0</td>\n","      <td>336855.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1234</th>\n","      <td>2023-10-07</td>\n","      <td>10:00:00</td>\n","      <td>2023-10-07 10:00:00</td>\n","      <td>1.0</td>\n","      <td>5.32</td>\n","      <td>5.09</td>\n","      <td>5.64</td>\n","      <td>0.10</td>\n","      <td>-1.13</td>\n","      <td>0.61</td>\n","      <td>...</td>\n","      <td>350.1</td>\n","      <td>443.0</td>\n","      <td>180254.0</td>\n","      <td>13068.0</td>\n","      <td>336487.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1235</th>\n","      <td>2023-10-07</td>\n","      <td>11:00:00</td>\n","      <td>2023-10-07 11:00:00</td>\n","      <td>1.0</td>\n","      <td>5.36</td>\n","      <td>5.21</td>\n","      <td>5.41</td>\n","      <td>-0.06</td>\n","      <td>-1.18</td>\n","      <td>0.34</td>\n","      <td>...</td>\n","      <td>353.8</td>\n","      <td>477.4</td>\n","      <td>168396.0</td>\n","      <td>13581.0</td>\n","      <td>213827.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1236</th>\n","      <td>2023-10-07</td>\n","      <td>12:00:00</td>\n","      <td>2023-10-07 12:00:00</td>\n","      <td>1.0</td>\n","      <td>5.55</td>\n","      <td>5.31</td>\n","      <td>5.73</td>\n","      <td>-1.06</td>\n","      <td>-2.22</td>\n","      <td>-0.29</td>\n","      <td>...</td>\n","      <td>354.0</td>\n","      <td>478.3</td>\n","      <td>182189.0</td>\n","      <td>5000.0</td>\n","      <td>200321.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1237</th>\n","      <td>2023-10-07</td>\n","      <td>13:00:00</td>\n","      <td>2023-10-07 13:00:00</td>\n","      <td>1.0</td>\n","      <td>5.65</td>\n","      <td>5.45</td>\n","      <td>5.78</td>\n","      <td>-0.94</td>\n","      <td>-2.30</td>\n","      <td>-0.45</td>\n","      <td>...</td>\n","      <td>438.2</td>\n","      <td>480.3</td>\n","      <td>186108.0</td>\n","      <td>92265.0</td>\n","      <td>197999.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1238 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46765dd0-0d98-4d6e-bd88-4ebe723d6842')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46765dd0-0d98-4d6e-bd88-4ebe723d6842 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46765dd0-0d98-4d6e-bd88-4ebe723d6842');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cc341b41-772f-473c-9722-c7159dd713d2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc341b41-772f-473c-9722-c7159dd713d2')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cc341b41-772f-473c-9722-c7159dd713d2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rws_vuxjie8Y","executionInfo":{"status":"ok","timestamp":1696744863303,"user_tz":-330,"elapsed":12,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"a12202ea-a43d-4270-d854-7a8a00cef71e"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Date', 'Time', 'Datetime', 'Source', 'Bt-med', 'Bt-min', 'Bt-max',\n","       'Bx-med', 'Bx-min', 'Bx-max', 'By-med', 'By-min', 'By-max', 'Bz-med',\n","       'Bz-min', 'Bz-max', 'Phi-mean', 'Phi-min', 'Phi-max', 'Theta-med',\n","       'Theta-min', 'Theta-max', 'Dens-med', 'Dens-min', 'Dens-max',\n","       'Speed-med', 'Speed-min', 'Speed-max', 'Temp-med', 'Temp-min',\n","       'Temp-max', 'SN', 'F10.7obs', 'F10.7adj', 'ap_value', 'Kp_value'],\n","      dtype='object')"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["data.set_index('Datetime', inplace=True)"],"metadata":{"id":"B5xjIA6zZFh8","executionInfo":{"status":"ok","timestamp":1696744865611,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["x = data.drop(['Kp_value','Date','Time'],axis=1)\n","y = data['Kp_value']\n","print(x.shape,y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvTPkLFjcnCw","executionInfo":{"status":"ok","timestamp":1696744866157,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"9eca39b8-6685-446b-bb98-ad5b9153f2c1"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(1238, 32) (1238,)\n"]}]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":840},"id":"EtRtYF5EjIgc","executionInfo":{"status":"ok","timestamp":1696744866946,"user_tz":-330,"elapsed":22,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"a114d8f8-4fd6-402e-ed27-8c30c9f09b05"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                           Date      Time  Source  Bt-med  Bt-min  Bt-max  \\\n","Datetime                                                                    \n","2023-08-17 00:00:00  2023-08-17  00:00:00     1.0    7.89    7.21    8.66   \n","2023-08-17 01:00:00  2023-08-17  01:00:00     1.0    7.44    6.78    8.34   \n","2023-08-17 02:00:00  2023-08-17  02:00:00     1.0    5.86    5.41    7.00   \n","2023-08-17 03:00:00  2023-08-17  03:00:00     1.0    6.40    4.40    7.56   \n","2023-08-17 04:00:00  2023-08-17  04:00:00     1.0    7.24    5.17    7.67   \n","...                         ...       ...     ...     ...     ...     ...   \n","2023-10-07 09:00:00  2023-10-07  09:00:00     1.0    5.60    5.41    5.75   \n","2023-10-07 10:00:00  2023-10-07  10:00:00     1.0    5.32    5.09    5.64   \n","2023-10-07 11:00:00  2023-10-07  11:00:00     1.0    5.36    5.21    5.41   \n","2023-10-07 12:00:00  2023-10-07  12:00:00     1.0    5.55    5.31    5.73   \n","2023-10-07 13:00:00  2023-10-07  13:00:00     1.0    5.65    5.45    5.78   \n","\n","                     Bx-med  Bx-min  Bx-max  By-med  ...  Speed-min  \\\n","Datetime                                             ...              \n","2023-08-17 00:00:00   -0.52   -3.56    0.57    7.14  ...      303.7   \n","2023-08-17 01:00:00   -2.78   -3.86   -0.63    6.98  ...      311.4   \n","2023-08-17 02:00:00   -1.94   -3.24   -0.14    5.28  ...      307.2   \n","2023-08-17 03:00:00   -0.84   -4.08    3.91    5.01  ...      298.8   \n","2023-08-17 04:00:00   -1.80   -2.70   -1.09    6.36  ...      313.6   \n","...                     ...     ...     ...     ...  ...        ...   \n","2023-10-07 09:00:00   -1.38   -1.73   -1.02    2.35  ...      400.9   \n","2023-10-07 10:00:00    0.10   -1.13    0.61    1.66  ...      350.1   \n","2023-10-07 11:00:00   -0.06   -1.18    0.34    1.93  ...      353.8   \n","2023-10-07 12:00:00   -1.06   -2.22   -0.29    3.06  ...      354.0   \n","2023-10-07 13:00:00   -0.94   -2.30   -0.45    2.66  ...      438.2   \n","\n","                     Speed-max  Temp-med  Temp-min  Temp-max     SN  F10.7obs  \\\n","Datetime                                                                        \n","2023-08-17 00:00:00      315.4   16786.0   12124.0   19425.0  146.0     151.9   \n","2023-08-17 01:00:00      316.8   12555.0   10256.0   16625.0  146.0     151.9   \n","2023-08-17 02:00:00      322.6   17006.0   14398.0   27957.0  146.0     151.9   \n","2023-08-17 03:00:00      317.2   28372.0   20008.0   40698.0  146.0     151.9   \n","2023-08-17 04:00:00      326.3   20563.0   16439.0   25790.0  146.0     151.9   \n","...                        ...       ...       ...       ...    ...       ...   \n","2023-10-07 09:00:00      441.8  327364.0  150079.0  336855.0    NaN       NaN   \n","2023-10-07 10:00:00      443.0  180254.0   13068.0  336487.0    NaN       NaN   \n","2023-10-07 11:00:00      477.4  168396.0   13581.0  213827.0    NaN       NaN   \n","2023-10-07 12:00:00      478.3  182189.0    5000.0  200321.0    NaN       NaN   \n","2023-10-07 13:00:00      480.3  186108.0   92265.0  197999.0    NaN       NaN   \n","\n","                     F10.7adj  ap_value  Kp_value  \n","Datetime                                           \n","2023-08-17 00:00:00     155.7       9.0     2.333  \n","2023-08-17 01:00:00     155.7       9.0     2.333  \n","2023-08-17 02:00:00     155.7       0.0     1.000  \n","2023-08-17 03:00:00     155.7       6.0     1.667  \n","2023-08-17 04:00:00     155.7       6.0     1.667  \n","...                       ...       ...       ...  \n","2023-10-07 09:00:00       NaN       0.0     0.000  \n","2023-10-07 10:00:00       NaN       0.0     0.000  \n","2023-10-07 11:00:00       NaN       0.0     0.000  \n","2023-10-07 12:00:00       NaN       0.0     0.000  \n","2023-10-07 13:00:00       NaN       0.0     0.000  \n","\n","[1238 rows x 35 columns]"],"text/html":["\n","  <div id=\"df-a2e85543-c1ce-4e96-b763-b4e2da445595\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Source</th>\n","      <th>Bt-med</th>\n","      <th>Bt-min</th>\n","      <th>Bt-max</th>\n","      <th>Bx-med</th>\n","      <th>Bx-min</th>\n","      <th>Bx-max</th>\n","      <th>By-med</th>\n","      <th>...</th>\n","      <th>Speed-min</th>\n","      <th>Speed-max</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>F10.7obs</th>\n","      <th>F10.7adj</th>\n","      <th>ap_value</th>\n","      <th>Kp_value</th>\n","    </tr>\n","    <tr>\n","      <th>Datetime</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2023-08-17 00:00:00</th>\n","      <td>2023-08-17</td>\n","      <td>00:00:00</td>\n","      <td>1.0</td>\n","      <td>7.89</td>\n","      <td>7.21</td>\n","      <td>8.66</td>\n","      <td>-0.52</td>\n","      <td>-3.56</td>\n","      <td>0.57</td>\n","      <td>7.14</td>\n","      <td>...</td>\n","      <td>303.7</td>\n","      <td>315.4</td>\n","      <td>16786.0</td>\n","      <td>12124.0</td>\n","      <td>19425.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9.0</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2023-08-17 01:00:00</th>\n","      <td>2023-08-17</td>\n","      <td>01:00:00</td>\n","      <td>1.0</td>\n","      <td>7.44</td>\n","      <td>6.78</td>\n","      <td>8.34</td>\n","      <td>-2.78</td>\n","      <td>-3.86</td>\n","      <td>-0.63</td>\n","      <td>6.98</td>\n","      <td>...</td>\n","      <td>311.4</td>\n","      <td>316.8</td>\n","      <td>12555.0</td>\n","      <td>10256.0</td>\n","      <td>16625.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>9.0</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2023-08-17 02:00:00</th>\n","      <td>2023-08-17</td>\n","      <td>02:00:00</td>\n","      <td>1.0</td>\n","      <td>5.86</td>\n","      <td>5.41</td>\n","      <td>7.00</td>\n","      <td>-1.94</td>\n","      <td>-3.24</td>\n","      <td>-0.14</td>\n","      <td>5.28</td>\n","      <td>...</td>\n","      <td>307.2</td>\n","      <td>322.6</td>\n","      <td>17006.0</td>\n","      <td>14398.0</td>\n","      <td>27957.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>0.0</td>\n","      <td>1.000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-08-17 03:00:00</th>\n","      <td>2023-08-17</td>\n","      <td>03:00:00</td>\n","      <td>1.0</td>\n","      <td>6.40</td>\n","      <td>4.40</td>\n","      <td>7.56</td>\n","      <td>-0.84</td>\n","      <td>-4.08</td>\n","      <td>3.91</td>\n","      <td>5.01</td>\n","      <td>...</td>\n","      <td>298.8</td>\n","      <td>317.2</td>\n","      <td>28372.0</td>\n","      <td>20008.0</td>\n","      <td>40698.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6.0</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-08-17 04:00:00</th>\n","      <td>2023-08-17</td>\n","      <td>04:00:00</td>\n","      <td>1.0</td>\n","      <td>7.24</td>\n","      <td>5.17</td>\n","      <td>7.67</td>\n","      <td>-1.80</td>\n","      <td>-2.70</td>\n","      <td>-1.09</td>\n","      <td>6.36</td>\n","      <td>...</td>\n","      <td>313.6</td>\n","      <td>326.3</td>\n","      <td>20563.0</td>\n","      <td>16439.0</td>\n","      <td>25790.0</td>\n","      <td>146.0</td>\n","      <td>151.9</td>\n","      <td>155.7</td>\n","      <td>6.0</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-10-07 09:00:00</th>\n","      <td>2023-10-07</td>\n","      <td>09:00:00</td>\n","      <td>1.0</td>\n","      <td>5.60</td>\n","      <td>5.41</td>\n","      <td>5.75</td>\n","      <td>-1.38</td>\n","      <td>-1.73</td>\n","      <td>-1.02</td>\n","      <td>2.35</td>\n","      <td>...</td>\n","      <td>400.9</td>\n","      <td>441.8</td>\n","      <td>327364.0</td>\n","      <td>150079.0</td>\n","      <td>336855.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-10-07 10:00:00</th>\n","      <td>2023-10-07</td>\n","      <td>10:00:00</td>\n","      <td>1.0</td>\n","      <td>5.32</td>\n","      <td>5.09</td>\n","      <td>5.64</td>\n","      <td>0.10</td>\n","      <td>-1.13</td>\n","      <td>0.61</td>\n","      <td>1.66</td>\n","      <td>...</td>\n","      <td>350.1</td>\n","      <td>443.0</td>\n","      <td>180254.0</td>\n","      <td>13068.0</td>\n","      <td>336487.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-10-07 11:00:00</th>\n","      <td>2023-10-07</td>\n","      <td>11:00:00</td>\n","      <td>1.0</td>\n","      <td>5.36</td>\n","      <td>5.21</td>\n","      <td>5.41</td>\n","      <td>-0.06</td>\n","      <td>-1.18</td>\n","      <td>0.34</td>\n","      <td>1.93</td>\n","      <td>...</td>\n","      <td>353.8</td>\n","      <td>477.4</td>\n","      <td>168396.0</td>\n","      <td>13581.0</td>\n","      <td>213827.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-10-07 12:00:00</th>\n","      <td>2023-10-07</td>\n","      <td>12:00:00</td>\n","      <td>1.0</td>\n","      <td>5.55</td>\n","      <td>5.31</td>\n","      <td>5.73</td>\n","      <td>-1.06</td>\n","      <td>-2.22</td>\n","      <td>-0.29</td>\n","      <td>3.06</td>\n","      <td>...</td>\n","      <td>354.0</td>\n","      <td>478.3</td>\n","      <td>182189.0</td>\n","      <td>5000.0</td>\n","      <td>200321.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-10-07 13:00:00</th>\n","      <td>2023-10-07</td>\n","      <td>13:00:00</td>\n","      <td>1.0</td>\n","      <td>5.65</td>\n","      <td>5.45</td>\n","      <td>5.78</td>\n","      <td>-0.94</td>\n","      <td>-2.30</td>\n","      <td>-0.45</td>\n","      <td>2.66</td>\n","      <td>...</td>\n","      <td>438.2</td>\n","      <td>480.3</td>\n","      <td>186108.0</td>\n","      <td>92265.0</td>\n","      <td>197999.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1238 rows × 35 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2e85543-c1ce-4e96-b763-b4e2da445595')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a2e85543-c1ce-4e96-b763-b4e2da445595 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a2e85543-c1ce-4e96-b763-b4e2da445595');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-69c330f6-903b-4347-ae93-198c56b14526\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69c330f6-903b-4347-ae93-198c56b14526')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-69c330f6-903b-4347-ae93-198c56b14526 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["\n","pip install feature-engine\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-w2t3iMzjf1F","executionInfo":{"status":"ok","timestamp":1696744873402,"user_tz":-330,"elapsed":5942,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"366d18d5-3739-42bc-e091-da4a0e823b80"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting feature-engine\n","  Downloading feature_engine-1.6.2-py2.py3-none-any.whl (328 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/328.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m174.1/328.9 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m328.9/328.9 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.18.2 in /usr/local/lib/python3.10/dist-packages (from feature-engine) (1.23.5)\n","Requirement already satisfied: pandas>=1.0.3 in /usr/local/lib/python3.10/dist-packages (from feature-engine) (1.5.3)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from feature-engine) (1.2.2)\n","Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from feature-engine) (1.11.3)\n","Requirement already satisfied: statsmodels>=0.11.1 in /usr/local/lib/python3.10/dist-packages (from feature-engine) (0.14.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.3->feature-engine) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.3->feature-engine) (2023.3.post1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->feature-engine) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->feature-engine) (3.2.0)\n","Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.11.1->feature-engine) (0.5.3)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.11.1->feature-engine) (23.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.2->statsmodels>=0.11.1->feature-engine) (1.16.0)\n","Installing collected packages: feature-engine\n","Successfully installed feature-engine-1.6.2\n"]}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ueVvCXnnjsxX","executionInfo":{"status":"ok","timestamp":1696744874078,"user_tz":-330,"elapsed":8,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"77f8180a-f70e-4a09-aac4-42f40a8092ff"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date          0\n","Time          0\n","Source        0\n","Bt-med        0\n","Bt-min        0\n","Bt-max        0\n","Bx-med        0\n","Bx-min        0\n","Bx-max        0\n","By-med        0\n","By-min        0\n","By-max        0\n","Bz-med        0\n","Bz-min        0\n","Bz-max        0\n","Phi-mean      0\n","Phi-min       0\n","Phi-max       0\n","Theta-med     0\n","Theta-min     0\n","Theta-max     0\n","Dens-med      0\n","Dens-min      0\n","Dens-max      0\n","Speed-med     0\n","Speed-min     0\n","Speed-max     0\n","Temp-med      0\n","Temp-min      0\n","Temp-max      0\n","SN           14\n","F10.7obs     14\n","F10.7adj     14\n","ap_value      0\n","Kp_value      0\n","dtype: int64"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["medians = data.median()\n","data.fillna(medians,inplace=True)\n","x = data.drop(['Kp_value','Date','Time'],axis=1)\n","y = data['Kp_value']\n","from feature_engine.selection import DropDuplicateFeatures,DropCorrelatedFeatures,DropConstantFeatures,SmartCorrelatedSelection\n","from sklearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","rf = RandomForestClassifier(n_estimators=10,n_jobs=4)\n","pip = Pipeline([('Constant',DropConstantFeatures(tol=0.98, variables=None)),('Duplicate',DropDuplicateFeatures(variables=None)),('Smart',SmartCorrelatedSelection(selection_method='variance',estimator=rf))])\n","xnew = pip.fit_transform(x)\n","print(xnew.shape)\n","print(xnew.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TEtnNuEScipi","executionInfo":{"status":"ok","timestamp":1696744875121,"user_tz":-330,"elapsed":1049,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"35faabed-06f4-4417-fe9d-f460bfc89798"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-18-e794c11984b7>:1: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  medians = data.median()\n"]},{"output_type":"stream","name":"stdout","text":["(1238, 16)\n","Index(['Bt-min', 'Bx-med', 'By-med', 'Phi-mean', 'Phi-min', 'Phi-max',\n","       'Theta-med', 'Theta-min', 'Theta-max', 'Dens-max', 'Speed-min',\n","       'Temp-med', 'Temp-min', 'Temp-max', 'SN', 'ap_value'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.figure(figsize=(10, 6))\n","sns.histplot(data['Kp_value'], bins=20, kde=True, color='blue')\n","plt.title('Distribution of Kp Values')\n","plt.xlabel('Kp')\n","plt.ylabel('Frequency')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"_gu8PacBjRc8","executionInfo":{"status":"ok","timestamp":1696744876218,"user_tz":-330,"elapsed":16,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"25ad6c93-3de2-4f6d-c39f-2df169a0570e"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1IAAAIjCAYAAAAJLyrXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABw00lEQVR4nO3dd1yW9eLG8ethIzKcDBUkxZF7Z5q73LkqNSk1y3NKW7aO57S0YXXKbFi2jlpmpebK0jQ1bbhNU8M9cCHgAEFBhPv3x/cnRc4Hwft54PN+ve4X9zN4uEAKLu7vcFiWZQkAAAAAcMU87A4AAAAAAO6GIgUAAAAATqJIAQAAAICTKFIAAAAA4CSKFAAAAAA4iSIFAAAAAE6iSAEAAACAkyhSAAAAAOAkihQAAAAAOIkiBQBu5Pnnn5fD4bgmH6tNmzZq06ZN7u0ff/xRDodDM2bMuCYff9CgQapcufI1+Vj5lZaWpnvvvVdhYWFyOBx65JFH7I5UKBwOh55//nm7YwCAS6FIAYBNJk2aJIfDkXv4+fkpIiJCHTt21Ntvv62TJ08WyMc5dOiQnn/+eW3YsKFAXq8guXK2K/Hyyy9r0qRJuv/++/XZZ5/prrvuuuhzK1eurG7dup13/2effSZPT0916tRJGRkZV5XnoYceksPh0M6dOy/6nP/85z9yOBz6/fffr+pjAUBxR5ECAJuNHj1an332md5//309+OCDkqRHHnlEderUOe+X3aefflqnT5926vUPHTqkUaNGOV1WFi5cqIULFzr1Ps66VLaPPvpI27ZtK9SPf7WWLFmiG264Qc8995xiY2PVqFEjp97/888/16BBg9ShQwfNnj1bfn5+V5VnwIABkqSpU6de9DlffPGF6tSpo7p1617VxwKA4o4iBQA269y5s2JjYzV48GCNHDlS33//vX744QclJibq1ltvzVOcvLy8rvqX7cs5deqUJMnHx0c+Pj6F+rEuxdvbW76+vrZ9/CuRmJiokJCQfL3vl19+qYEDB6pdu3aaM2dOgfy7NmvWTFWrVtUXX3xxwcdXrFihPXv25BYuAED+UaQAwAW1a9dOzzzzjPbt26cpU6bk3n+hOVKLFi1Sy5YtFRISopIlS6p69er697//LcnMa2rSpIkkafDgwbnDCCdNmiTJzIOqXbu21q1bp1atWqlEiRK57/v3OVLnZGdn69///rfCwsIUEBCgW2+9Vfv378/znMqVK2vQoEHnve9fX/Ny2S40Ryo9PV2PPfaYKlWqJF9fX1WvXl2vv/66LMvK8zyHw6Hhw4dr9uzZql27tnx9fVWrVi0tWLDgwl/wv0lMTNSQIUMUGhoqPz8/1atXT5MnT859/Nx8sT179ujbb7/Nzb53794rev1p06YpNjZWbdq00dy5c/OUqL1798rhcOj111/Xm2++qaioKPn7+6t169bavHnzZV97wIAB2rp1q9avX3/eY1OnTpXD4VD//v115swZPfvss2rUqJGCg4MVEBCgm266SUuXLr3sx7jY/LWLzeGbMmWKGjVqJH9/f5UuXVr9+vU773tmx44d6tOnj8LCwuTn56eKFSuqX79+SklJuWweALCDl90BAAAXdtddd+nf//63Fi5cqPvuu++Cz9myZYu6deumunXravTo0fL19dXOnTv1yy+/SJJq1qyp0aNH69lnn9XQoUN10003SZJuvPHG3Nc4evSoOnfurH79+ik2NlahoaGXzPXSSy/J4XDoqaeeUmJiosaNG6cOHTpow4YN8vf3v+LP70qy/ZVlWbr11lu1dOlSDRkyRPXr19f333+vJ554QgcPHtSbb76Z5/k///yzZs6cqQceeECBgYF6++231adPH8XHx6tMmTIXzXX69Gm1adNGO3fu1PDhwxUdHa3p06dr0KBBOnHihB5++GHVrFlTn332mR599FFVrFhRjz32mCSpXLlyl/28v/76aw0YMECtWrXSN998c9Gv2aeffqqTJ09q2LBhysjI0FtvvaV27dpp06ZNl/w3GjBggEaNGqWpU6eqYcOGufdnZ2dr2rRpuummmxQZGank5GR9/PHH6t+/v+677z6dPHlSn3zyiTp27KjVq1erfv36l/1crsRLL72kZ555RnfccYfuvfdeJSUl6Z133lGrVq3022+/KSQkRGfOnFHHjh2VmZmpBx98UGFhYTp48KDmzZunEydOKDg4uECyAECBsgAAtpg4caIlyVqzZs1FnxMcHGw1aNAg9/Zzzz1n/fV/3W+++aYlyUpKSrroa6xZs8aSZE2cOPG8x1q3bm1JsiZMmHDBx1q3bp17e+nSpZYkq0KFClZqamru/dOmTbMkWW+99VbufVFRUdbAgQMv+5qXyjZw4EArKioq9/bs2bMtSdaLL76Y53m33Xab5XA4rJ07d+beJ8ny8fHJc9/GjRstSdY777xz3sf6q3HjxlmSrClTpuTed+bMGat58+ZWyZIl83zuUVFRVteuXS/5en99bkREhOXl5WW1adPGSk9Pv+Dz9uzZY0my/P39rQMHDuTev2rVKkuS9eijj172YzVp0sSqWLGilZ2dnXvfggULLEnWBx98YFmWZZ09e9bKzMzM837Hjx+3QkNDrXvuuSfP/ZKs5557Lvf23/9tzvn79+fevXstT09P66WXXsrzvE2bNlleXl659//222+WJGv69OmX/dwAwFUwtA8AXFjJkiUvuXrfufk5c+bMUU5OTr4+hq+vrwYPHnzFz7/77rsVGBiYe/u2225TeHi4vvvuu3x9/Cv13XffydPTUw899FCe+x977DFZlqX58+fnub9Dhw6qUqVK7u26desqKChIu3fvvuzHCQsLU//+/XPv8/b21kMPPaS0tDQtW7Ys35/DsWPHdPbsWVWsWPGyV+969uypChUq5N5u2rSpmjVrdkVf59jYWB04cEDLly/PvW/q1Kny8fHR7bffLkny9PTMnQOXk5OTm61x48YXHBaYHzNnzlROTo7uuOMOJScn5x5hYWGKiYnJHUZ47orT999/nztHDwBcHUUKAFxYWlpantLyd3379lWLFi107733KjQ0VP369dO0adOcKlUVKlRwalGJmJiYPLcdDoeqVq16xfOD8mvfvn2KiIg47+tRs2bN3Mf/KjIy8rzXKFWqlI4fP37ZjxMTEyMPj7w/Ii/2cZzRvn173X///ZoyZcpl95z6+9dZkqpVq3ZFX+d+/frJ09Mzd/W+jIwMzZo1S507d1apUqVynzd58mTVrVtXfn5+KlOmjMqVK6dvv/22wOYl7dixQ5ZlKSYmRuXKlctzxMXFKTExUZIUHR2tESNG6OOPP1bZsmXVsWNHjR8/nvlRAFwac6QAwEUdOHBAKSkpqlq16kWf4+/vr+XLl2vp0qX69ttvtWDBAn311Vdq166dFi5cKE9Pz8t+HGfmNV2pi20anJ2dfUWZCsLFPo71t4UprrV3331Xx48f19tvv61SpUoVyka35cuX180336yvv/5a48eP1zfffKOTJ0/mWa1vypQpGjRokHr27KknnnhC5cuXl6enp8aMGaNdu3Zd8vUv9e/7Vzk5OXI4HJo/f/4F/z1KliyZe/7GG29o0KBBmjNnjhYuXKiHHnpIY8aM0cqVK1WxYkVnPn0AuCYoUgDgoj777DNJUseOHS/5PA8PD7Vv317t27fX2LFj9fLLL+s///mPli5dqg4dOlz0l9782rFjR57blmVp586defYlKlWqlE6cOHHe++7bt0/XXXdd7m1nskVFRemHH37QyZMn81yV2rp1a+7jBSEqKkq///67cnJy8lyVKqiP4+HhoU8//VQpKSkaNWqUSpcufd5wRen8r7Mkbd++/YKr5V3IgAEDtGDBAs2fP19Tp05VUFCQunfvnvv4jBkzdN1112nmzJl5/h2ee+65y772pf59/6pKlSqyLEvR0dGqVq3aZV+3Tp06qlOnjp5++mn9+uuvatGihSZMmKAXX3zxsu8LANcaQ/sAwAUtWbJEL7zwgqKjoy+558+xY8fOu+/camuZmZmSpICAAEm64C+++XFuNblzZsyYocOHD6tz586591WpUkUrV67UmTNncu+bN2/eeUteO5OtS5cuys7O1rvvvpvn/jfffFMOhyPPx78aXbp0UUJCgr766qvc+86ePat33nlHJUuWVOvWra/6Y3h7e2vGjBlq0aKFHnnkkdzS/FezZ8/WwYMHc2+vXr1aq1atuuLPs2fPnipRooTee+89zZ8/X717986zzPq5K0R/vUK3atUqrVix4rKvXaVKFaWkpOTZMPrw4cOaNWtWnuf17t1bnp6eGjVq1HlXAi3L0tGjRyVJqampOnv2bJ7H69SpIw8Pj9zvYwBwNVyRAgCbzZ8/X1u3btXZs2d15MgRLVmyRIsWLVJUVNR5ewz93ejRo7V8+XJ17dpVUVFRSkxM1HvvvaeKFSuqZcuWkswvvSEhIZowYYICAwMVEBCgZs2aKTo6Ol95S5curZYtW2rw4ME6cuSIxo0bp6pVq+ZZov3ee+/VjBkz1KlTJ91xxx3atWuXpkyZkmfxB2ezde/eXW3bttV//vMf7d27V/Xq1dPChQs1Z84cPfLII+e9dn4NHTpUH3zwgQYNGqR169apcuXKmjFjhn755ReNGzfuknPWnFGiRAl9++23at26te655x4FBwfr1ltvzX28atWqatmype6//35lZmZq3LhxKlOmjJ588skrev2SJUuqZ8+eufOk/l7Iu3XrppkzZ6pXr17q2rWr9uzZowkTJuj6669XWlraJV+7X79+euqpp9SrVy89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06ZNNW7cOKWnp2vw4MF2RwMAAABQBBWJItW3b18lJSXp2WefVUJCgurXr68FCxYoNDTU7mhO8/X11XPPPXfe0EPgYviegbP4noGz+J6Bs/iegTPc9fvF7VftAwAAAIBrze3nSAEAAADAtUaRAgAAAAAnUaQAAAAAwEkUKQAAAABwEkXKhYwfP16VK1eWn5+fmjVrptWrV9sdCS5s+fLl6t69uyIiIuRwODR79my7I8GFjRkzRk2aNFFgYKDKly+vnj17atu2bXbHggt7//33Vbdu3dwNMps3b6758+fbHQtu5JVXXpHD4dAjjzxidxS4qOeff14OhyPPUaNGDbtjXTGKlIv46quvNGLECD333HNav3696tWrp44dOyoxMdHuaHBR6enpqlevnsaPH293FLiBZcuWadiwYVq5cqUWLVqkrKws3XLLLUpPT7c7GlxUxYoV9corr2jdunVau3at2rVrpx49emjLli12R4MbWLNmjT744APVrVvX7ihwcbVq1dLhw4dzj59//tnuSFeM5c9dRLNmzdSkSRO9++67kqScnBxVqlRJDz74oP71r3/ZnA6uzuFwaNasWerZs6fdUeAmkpKSVL58eS1btkytWrWyOw7cROnSpfXf//5XQ4YMsTsKXFhaWpoaNmyo9957Ty+++KLq16+vcePG2R0LLuj555/X7NmztWHDBruj5AtXpFzAmTNntG7dOnXo0CH3Pg8PD3Xo0EErVqywMRmAoiolJUWS+cUYuJzs7Gx9+eWXSk9PV/Pmze2OAxc3bNgwde3aNc/vNcDF7NixQxEREbruuus0YMAAxcfH2x3pinnZHQBScnKysrOzFRoamuf+0NBQbd261aZUAIqqnJwcPfLII2rRooVq165tdxy4sE2bNql58+bKyMhQyZIlNWvWLF1//fV2x4IL+/LLL7V+/XqtWbPG7ihwA82aNdOkSZNUvXp1HT58WKNGjdJNN92kzZs3KzAw0O54l0WRAoBiZtiwYdq8ebNbjUOHPapXr64NGzYoJSVFM2bM0MCBA7Vs2TLKFC5o//79evjhh7Vo0SL5+fnZHQduoHPnzrnndevWVbNmzRQVFaVp06a5xRBiipQLKFu2rDw9PXXkyJE89x85ckRhYWE2pQJQFA0fPlzz5s3T8uXLVbFiRbvjwMX5+PioatWqkqRGjRppzZo1euutt/TBBx/YnAyuaN26dUpMTFTDhg1z78vOztby5cv17rvvKjMzU56enjYmhKsLCQlRtWrVtHPnTrujXBHmSLkAHx8fNWrUSIsXL869LycnR4sXL2YsOoACYVmWhg8frlmzZmnJkiWKjo62OxLcUE5OjjIzM+2OARfVvn17bdq0SRs2bMg9GjdurAEDBmjDhg2UKFxWWlqadu3apfDwcLujXBGuSLmIESNGaODAgWrcuLGaNm2qcePGKT09XYMHD7Y7GlxUWlpanr/Y7NmzRxs2bFDp0qUVGRlpYzK4omHDhmnq1KmaM2eOAgMDlZCQIEkKDg6Wv7+/zengikaOHKnOnTsrMjJSJ0+e1NSpU/Xjjz/q+++/tzsaXFRgYOB58y4DAgJUpkwZ5mPigh5//HF1795dUVFROnTokJ577jl5enqqf//+dke7IhQpF9G3b18lJSXp2WefVUJCgurXr68FCxactwAFcM7atWvVtm3b3NsjRoyQJA0cOFCTJk2yKRVc1fvvvy9JatOmTZ77J06cqEGDBl37QHB5iYmJuvvuu3X48GEFBwerbt26+v7773XzzTfbHQ1AEXHgwAH1799fR48eVbly5dSyZUutXLlS5cqVszvaFWEfKQAAAABwEnOkAAAAAMBJFCkAAAAAcBJFCgAAAACcRJECAAAAACdRpAAAAADASRQpAAAAAHASRQoAAAAAnESRAgAAAAAnUaQAAAAAwEkUKQBAsTJo0CD17Nkzz30zZsyQn5+f3njjDXtCAQDcjpfdAQAAsNPHH3+sYcOGacKECRo8eLDdcQAAboIiBQAotl577TU999xz+vLLL9WrVy9JUps2bVS7dm1J0meffSZvb2/df//9Gj16tBwOh51xAQAuhKF9AIBi6amnntILL7ygefPm5ZaocyZPniwvLy+tXr1ab731lsaOHauPP/7YpqQAAFfksCzLsjsEAADXyqBBg/TFF1/ozJkzWrx4sdq1a5fn8TZt2igxMVFbtmzJvQL1r3/9S3PnztUff/xhR2QAgAviihQAoNipW7euKleurOeee05paWnnPX7DDTfkGcbXvHlz7dixQ9nZ2dcyJgDAhVGkAADFToUKFfTjjz/q4MGD6tSpk06ePGl3JACAm6FIAQCKpaioKC1btkwJCQnnlalVq1blee7KlSsVExMjT0/Pax0TAOCiKFIAgGKrUqVK+vHHH5WYmKiOHTsqNTVVkhQfH68RI0Zo27Zt+uKLL/TOO+/o4YcftjktAMCVsPw5AKBYq1ixon788Ue1bdtWHTt2VGZmpu6++26dPn1aTZs2laenpx5++GENHTrU7qgAABfCqn0AAPxFmzZtVL9+fY0bN87uKAAAF8bQPgAAAABwEkUKAAAAAJzE0D4AAAAAcBJXpAAAAADASRQpAAAAAHASRQoAAAAAnESRAgAAAAAnUaQAAAAAwEkUKQAAAABwEkUKAAAAAJxEkQIAAAAAJ/0fQFkfILQ5RyMAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"E9EGQLm5lAZu","executionInfo":{"status":"ok","timestamp":1696744876218,"user_tz":-330,"elapsed":14,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","# Initialize the standard scaler\n","scaler = StandardScaler()\n","\n","# Fit the scaler to your data and transform\n","xnew_scaled = scaler.fit_transform(xnew)\n","\n","# Convert back to DataFrame for better readability and to retain column names\n","x_scaled_df = pd.DataFrame(xnew_scaled, columns=xnew.columns)\n","x_scaled_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":244},"id":"cjCuXAL9kq6v","executionInfo":{"status":"ok","timestamp":1696744876218,"user_tz":-330,"elapsed":13,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"f48fd53d-f3a7-4b96-cb0a-01fb00c091b9"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Bt-min    Bx-med    By-med  Phi-mean   Phi-min   Phi-max  Theta-med  \\\n","0  1.256494 -0.124593  1.800316 -0.964354 -0.274991 -1.425668   0.563558   \n","1  1.017335 -0.800667  1.759639 -0.849016 -0.168426 -1.372034  -0.348924   \n","2  0.255364 -0.549383  1.327454 -0.858694 -0.407194 -1.380849  -0.484072   \n","3 -0.306382 -0.220321  1.258813 -1.077816 -0.794022 -1.321162   0.034569   \n","4  0.121880 -0.507502  1.602019 -0.899279 -0.145156 -1.428323  -0.571244   \n","\n","   Theta-min  Theta-max  Dens-max  Speed-min  Temp-med  Temp-min  Temp-max  \\\n","0   0.102065   0.085991  1.294034  -1.771215 -1.026606 -0.929024 -1.252045   \n","1   0.228835  -0.175134  1.921664  -1.643510 -1.082379 -0.971961 -1.275226   \n","2   0.053216  -0.566188  2.077048  -1.713168 -1.023706 -0.876756 -1.181412   \n","3  -0.028300   0.852253  0.843115  -1.852482 -0.873878 -0.747809 -1.075934   \n","4  -0.156868  -1.210127  0.206345  -1.607023 -0.976817 -0.829843 -1.199352   \n","\n","         SN  ap_value  \n","0  0.554549  0.746650  \n","1  0.554549  0.746650  \n","2  0.554549 -0.927228  \n","3  0.554549  0.188691  \n","4  0.554549  0.188691  "],"text/html":["\n","  <div id=\"df-3eaccafe-dd92-4be0-8135-105bcb039fff\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bt-min</th>\n","      <th>Bx-med</th>\n","      <th>By-med</th>\n","      <th>Phi-mean</th>\n","      <th>Phi-min</th>\n","      <th>Phi-max</th>\n","      <th>Theta-med</th>\n","      <th>Theta-min</th>\n","      <th>Theta-max</th>\n","      <th>Dens-max</th>\n","      <th>Speed-min</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>ap_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.256494</td>\n","      <td>-0.124593</td>\n","      <td>1.800316</td>\n","      <td>-0.964354</td>\n","      <td>-0.274991</td>\n","      <td>-1.425668</td>\n","      <td>0.563558</td>\n","      <td>0.102065</td>\n","      <td>0.085991</td>\n","      <td>1.294034</td>\n","      <td>-1.771215</td>\n","      <td>-1.026606</td>\n","      <td>-0.929024</td>\n","      <td>-1.252045</td>\n","      <td>0.554549</td>\n","      <td>0.746650</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.017335</td>\n","      <td>-0.800667</td>\n","      <td>1.759639</td>\n","      <td>-0.849016</td>\n","      <td>-0.168426</td>\n","      <td>-1.372034</td>\n","      <td>-0.348924</td>\n","      <td>0.228835</td>\n","      <td>-0.175134</td>\n","      <td>1.921664</td>\n","      <td>-1.643510</td>\n","      <td>-1.082379</td>\n","      <td>-0.971961</td>\n","      <td>-1.275226</td>\n","      <td>0.554549</td>\n","      <td>0.746650</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.255364</td>\n","      <td>-0.549383</td>\n","      <td>1.327454</td>\n","      <td>-0.858694</td>\n","      <td>-0.407194</td>\n","      <td>-1.380849</td>\n","      <td>-0.484072</td>\n","      <td>0.053216</td>\n","      <td>-0.566188</td>\n","      <td>2.077048</td>\n","      <td>-1.713168</td>\n","      <td>-1.023706</td>\n","      <td>-0.876756</td>\n","      <td>-1.181412</td>\n","      <td>0.554549</td>\n","      <td>-0.927228</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.306382</td>\n","      <td>-0.220321</td>\n","      <td>1.258813</td>\n","      <td>-1.077816</td>\n","      <td>-0.794022</td>\n","      <td>-1.321162</td>\n","      <td>0.034569</td>\n","      <td>-0.028300</td>\n","      <td>0.852253</td>\n","      <td>0.843115</td>\n","      <td>-1.852482</td>\n","      <td>-0.873878</td>\n","      <td>-0.747809</td>\n","      <td>-1.075934</td>\n","      <td>0.554549</td>\n","      <td>0.188691</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.121880</td>\n","      <td>-0.507502</td>\n","      <td>1.602019</td>\n","      <td>-0.899279</td>\n","      <td>-0.145156</td>\n","      <td>-1.428323</td>\n","      <td>-0.571244</td>\n","      <td>-0.156868</td>\n","      <td>-1.210127</td>\n","      <td>0.206345</td>\n","      <td>-1.607023</td>\n","      <td>-0.976817</td>\n","      <td>-0.829843</td>\n","      <td>-1.199352</td>\n","      <td>0.554549</td>\n","      <td>0.188691</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3eaccafe-dd92-4be0-8135-105bcb039fff')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3eaccafe-dd92-4be0-8135-105bcb039fff button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3eaccafe-dd92-4be0-8135-105bcb039fff');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a77794b0-2f6c-41d5-ae3a-4a7abd55f1a0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a77794b0-2f6c-41d5-ae3a-4a7abd55f1a0')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a77794b0-2f6c-41d5-ae3a-4a7abd55f1a0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["x_scaled_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"efOKA1iAlUDB","executionInfo":{"status":"ok","timestamp":1696744876218,"user_tz":-330,"elapsed":12,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"f514a6af-dd2a-468e-f83d-3b4da3014a3d"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Bt-min        Bx-med        By-med      Phi-mean       Phi-min  \\\n","count  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03   \n","mean  -1.721832e-16  2.295776e-17 -2.295776e-17  2.525354e-16 -2.295776e-17   \n","std    1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00   \n","min   -2.631229e+00 -2.580597e+00 -2.958804e+00 -1.928629e+00 -1.140694e+00   \n","25%   -5.928162e-01 -7.580388e-01 -7.635584e-01 -8.592862e-01 -9.567273e-01   \n","50%    1.064296e-02  1.151888e-02 -7.333346e-02 -1.415850e-01 -1.777437e-01   \n","75%    5.723884e-01  7.818244e-01  6.988795e-01  9.886117e-01  6.631200e-01   \n","max    2.925045e+00  2.947654e+00  3.096871e+00  1.609318e+00  2.307601e+00   \n","\n","            Phi-max     Theta-med     Theta-min     Theta-max      Dens-max  \\\n","count  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03   \n","mean   2.295776e-17  2.295776e-17  1.147888e-17 -5.739441e-17  9.183105e-17   \n","std    1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00   \n","min   -2.370252e+00 -2.246637e+00 -1.684093e+00 -2.837720e+00 -2.054343e+00   \n","25%   -9.514900e-01 -8.013245e-01 -8.254784e-01 -6.895406e-01 -6.703572e-01   \n","50%    2.327457e-01  4.209458e-02 -5.856902e-02  5.802441e-02 -1.059471e-01   \n","75%    9.746653e-01  7.078775e-01  7.509714e-01  7.309597e-01  4.835987e-01   \n","max    1.159143e+00  2.615859e+00  3.039337e+00  1.969322e+00  3.115989e+00   \n","\n","          Speed-min      Temp-med      Temp-min      Temp-max            SN  \\\n","count  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03  1.238000e+03   \n","mean  -6.887329e-17 -2.295776e-17  1.377466e-16  6.887329e-17 -1.377466e-16   \n","std    1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00  1.000404e+00   \n","min   -2.073064e+00 -2.566076e+00 -1.092771e+00 -2.240716e+00 -1.358896e+00   \n","25%   -5.820635e-01 -6.934613e-01 -8.329746e-01 -7.390873e-01 -7.818251e-01   \n","50%   -1.485291e-02 -2.106047e-01 -1.730284e-01 -1.803255e-01 -1.136379e-01   \n","75%    6.348685e-01  5.018181e-01  4.664897e-01  5.027838e-01  7.367821e-01   \n","max    2.507741e+00  3.255636e+00  3.144258e+00  2.655771e+00  2.133901e+00   \n","\n","           ap_value  \n","count  1.238000e+03  \n","mean   2.295776e-17  \n","std    1.000404e+00  \n","min   -9.272276e-01  \n","25%   -9.272276e-01  \n","50%    2.704163e-03  \n","75%    3.746769e-01  \n","max    3.164472e+00  "],"text/html":["\n","  <div id=\"df-5668efaa-b8f9-4176-be1e-f34bb2003613\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bt-min</th>\n","      <th>Bx-med</th>\n","      <th>By-med</th>\n","      <th>Phi-mean</th>\n","      <th>Phi-min</th>\n","      <th>Phi-max</th>\n","      <th>Theta-med</th>\n","      <th>Theta-min</th>\n","      <th>Theta-max</th>\n","      <th>Dens-max</th>\n","      <th>Speed-min</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>ap_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","      <td>1.238000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-1.721832e-16</td>\n","      <td>2.295776e-17</td>\n","      <td>-2.295776e-17</td>\n","      <td>2.525354e-16</td>\n","      <td>-2.295776e-17</td>\n","      <td>2.295776e-17</td>\n","      <td>2.295776e-17</td>\n","      <td>1.147888e-17</td>\n","      <td>-5.739441e-17</td>\n","      <td>9.183105e-17</td>\n","      <td>-6.887329e-17</td>\n","      <td>-2.295776e-17</td>\n","      <td>1.377466e-16</td>\n","      <td>6.887329e-17</td>\n","      <td>-1.377466e-16</td>\n","      <td>2.295776e-17</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","      <td>1.000404e+00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-2.631229e+00</td>\n","      <td>-2.580597e+00</td>\n","      <td>-2.958804e+00</td>\n","      <td>-1.928629e+00</td>\n","      <td>-1.140694e+00</td>\n","      <td>-2.370252e+00</td>\n","      <td>-2.246637e+00</td>\n","      <td>-1.684093e+00</td>\n","      <td>-2.837720e+00</td>\n","      <td>-2.054343e+00</td>\n","      <td>-2.073064e+00</td>\n","      <td>-2.566076e+00</td>\n","      <td>-1.092771e+00</td>\n","      <td>-2.240716e+00</td>\n","      <td>-1.358896e+00</td>\n","      <td>-9.272276e-01</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-5.928162e-01</td>\n","      <td>-7.580388e-01</td>\n","      <td>-7.635584e-01</td>\n","      <td>-8.592862e-01</td>\n","      <td>-9.567273e-01</td>\n","      <td>-9.514900e-01</td>\n","      <td>-8.013245e-01</td>\n","      <td>-8.254784e-01</td>\n","      <td>-6.895406e-01</td>\n","      <td>-6.703572e-01</td>\n","      <td>-5.820635e-01</td>\n","      <td>-6.934613e-01</td>\n","      <td>-8.329746e-01</td>\n","      <td>-7.390873e-01</td>\n","      <td>-7.818251e-01</td>\n","      <td>-9.272276e-01</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.064296e-02</td>\n","      <td>1.151888e-02</td>\n","      <td>-7.333346e-02</td>\n","      <td>-1.415850e-01</td>\n","      <td>-1.777437e-01</td>\n","      <td>2.327457e-01</td>\n","      <td>4.209458e-02</td>\n","      <td>-5.856902e-02</td>\n","      <td>5.802441e-02</td>\n","      <td>-1.059471e-01</td>\n","      <td>-1.485291e-02</td>\n","      <td>-2.106047e-01</td>\n","      <td>-1.730284e-01</td>\n","      <td>-1.803255e-01</td>\n","      <td>-1.136379e-01</td>\n","      <td>2.704163e-03</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>5.723884e-01</td>\n","      <td>7.818244e-01</td>\n","      <td>6.988795e-01</td>\n","      <td>9.886117e-01</td>\n","      <td>6.631200e-01</td>\n","      <td>9.746653e-01</td>\n","      <td>7.078775e-01</td>\n","      <td>7.509714e-01</td>\n","      <td>7.309597e-01</td>\n","      <td>4.835987e-01</td>\n","      <td>6.348685e-01</td>\n","      <td>5.018181e-01</td>\n","      <td>4.664897e-01</td>\n","      <td>5.027838e-01</td>\n","      <td>7.367821e-01</td>\n","      <td>3.746769e-01</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.925045e+00</td>\n","      <td>2.947654e+00</td>\n","      <td>3.096871e+00</td>\n","      <td>1.609318e+00</td>\n","      <td>2.307601e+00</td>\n","      <td>1.159143e+00</td>\n","      <td>2.615859e+00</td>\n","      <td>3.039337e+00</td>\n","      <td>1.969322e+00</td>\n","      <td>3.115989e+00</td>\n","      <td>2.507741e+00</td>\n","      <td>3.255636e+00</td>\n","      <td>3.144258e+00</td>\n","      <td>2.655771e+00</td>\n","      <td>2.133901e+00</td>\n","      <td>3.164472e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5668efaa-b8f9-4176-be1e-f34bb2003613')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5668efaa-b8f9-4176-be1e-f34bb2003613 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5668efaa-b8f9-4176-be1e-f34bb2003613');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-38ed5917-ea6f-4741-88b0-4b141fa88788\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38ed5917-ea6f-4741-88b0-4b141fa88788')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-38ed5917-ea6f-4741-88b0-4b141fa88788 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Function to reshape inputs for LSTM\n","def create_dataset(X, y, time_steps=1):\n","    Xs, ys = [], []\n","    for i in range(len(X) - time_steps):\n","        v = X.iloc[i:(i + time_steps)].values\n","        Xs.append(v)\n","        ys.append(y.iloc[i + time_steps])\n","    return np.array(Xs), np.array(ys)"],"metadata":{"id":"-Wdu6WeGr1l8","executionInfo":{"status":"ok","timestamp":1696744882565,"user_tz":-330,"elapsed":10,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["x_scaled_df.reset_index(drop=True, inplace=True)\n","y.reset_index(drop=True, inplace=True)"],"metadata":{"id":"WAsslzCCtI-O","executionInfo":{"status":"ok","timestamp":1696744882565,"user_tz":-330,"elapsed":7,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["final_dataframe = pd.concat([x_scaled_df,y], axis = 1)"],"metadata":{"id":"GFyRk1SPsEpJ","executionInfo":{"status":"ok","timestamp":1696744882566,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["final_dataframe"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"FaizwjtwoSLf","executionInfo":{"status":"ok","timestamp":1696744883399,"user_tz":-330,"elapsed":10,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"f7cbb0cc-be6e-40bb-eb4e-73313222b6b4"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Bt-min    Bx-med    By-med  Phi-mean   Phi-min   Phi-max  Theta-med  \\\n","0     1.256494 -0.124593  1.800316 -0.964354 -0.274991 -1.425668   0.563558   \n","1     1.017335 -0.800667  1.759639 -0.849016 -0.168426 -1.372034  -0.348924   \n","2     0.255364 -0.549383  1.327454 -0.858694 -0.407194 -1.380849  -0.484072   \n","3    -0.306382 -0.220321  1.258813 -1.077816 -0.794022 -1.321162   0.034569   \n","4     0.121880 -0.507502  1.602019 -0.899279 -0.145156 -1.428323  -0.571244   \n","...        ...       ...       ...       ...       ...       ...        ...   \n","1233  0.255364 -0.381860  0.582571 -0.759946  0.019377 -1.308736   1.991546   \n","1234  0.077385  0.060878  0.407155 -1.068928 -0.609823 -1.455511   2.317970   \n","1235  0.144127  0.013015  0.475796 -0.997435 -0.387425 -1.417065   2.222959   \n","1236  0.199745 -0.286133  0.763072 -0.862446 -0.148348 -1.406657   1.778633   \n","1237  0.277611 -0.250235  0.661381 -0.844869 -0.106340 -1.388071   1.962070   \n","\n","      Theta-min  Theta-max  Dens-max  Speed-min  Temp-med  Temp-min  Temp-max  \\\n","0      0.102065   0.085991  1.294034  -1.771215 -1.026606 -0.929024 -1.252045   \n","1      0.228835  -0.175134  1.921664  -1.643510 -1.082379 -0.971961 -1.275226   \n","2      0.053216  -0.566188  2.077048  -1.713168 -1.023706 -0.876756 -1.181412   \n","3     -0.028300   0.852253  0.843115  -1.852482 -0.873878 -0.747809 -1.075934   \n","4     -0.156868  -1.210127  0.206345  -1.607023 -0.976817 -0.829843 -1.199352   \n","...         ...        ...       ...        ...       ...       ...       ...   \n","1233   2.685402   1.199257 -0.701586  -0.159143  3.067461  2.241903  1.375849   \n","1234   2.777407   1.673972 -0.951420  -1.001667  1.128244 -0.907326  1.372802   \n","1235   2.773212   1.602987 -0.869158  -0.940302  0.971931 -0.895535  0.357342   \n","1236   2.172331   1.461333 -0.835643  -0.936985  1.153752 -1.092771  0.245531   \n","1237   2.141463   1.535487 -0.774708   0.459481  1.205412  0.913035  0.226308   \n","\n","            SN  ap_value  Kp_value  \n","0     0.554549  0.746650     2.333  \n","1     0.554549  0.746650     2.333  \n","2     0.554549 -0.927228     1.000  \n","3     0.554549  0.188691     1.667  \n","4     0.554549  0.188691     1.667  \n","...        ...       ...       ...  \n","1233 -0.113638 -0.927228     0.000  \n","1234 -0.113638 -0.927228     0.000  \n","1235 -0.113638 -0.927228     0.000  \n","1236 -0.113638 -0.927228     0.000  \n","1237 -0.113638 -0.927228     0.000  \n","\n","[1238 rows x 17 columns]"],"text/html":["\n","  <div id=\"df-5be00acb-3450-4a79-b183-a8d125a7df59\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bt-min</th>\n","      <th>Bx-med</th>\n","      <th>By-med</th>\n","      <th>Phi-mean</th>\n","      <th>Phi-min</th>\n","      <th>Phi-max</th>\n","      <th>Theta-med</th>\n","      <th>Theta-min</th>\n","      <th>Theta-max</th>\n","      <th>Dens-max</th>\n","      <th>Speed-min</th>\n","      <th>Temp-med</th>\n","      <th>Temp-min</th>\n","      <th>Temp-max</th>\n","      <th>SN</th>\n","      <th>ap_value</th>\n","      <th>Kp_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.256494</td>\n","      <td>-0.124593</td>\n","      <td>1.800316</td>\n","      <td>-0.964354</td>\n","      <td>-0.274991</td>\n","      <td>-1.425668</td>\n","      <td>0.563558</td>\n","      <td>0.102065</td>\n","      <td>0.085991</td>\n","      <td>1.294034</td>\n","      <td>-1.771215</td>\n","      <td>-1.026606</td>\n","      <td>-0.929024</td>\n","      <td>-1.252045</td>\n","      <td>0.554549</td>\n","      <td>0.746650</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.017335</td>\n","      <td>-0.800667</td>\n","      <td>1.759639</td>\n","      <td>-0.849016</td>\n","      <td>-0.168426</td>\n","      <td>-1.372034</td>\n","      <td>-0.348924</td>\n","      <td>0.228835</td>\n","      <td>-0.175134</td>\n","      <td>1.921664</td>\n","      <td>-1.643510</td>\n","      <td>-1.082379</td>\n","      <td>-0.971961</td>\n","      <td>-1.275226</td>\n","      <td>0.554549</td>\n","      <td>0.746650</td>\n","      <td>2.333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.255364</td>\n","      <td>-0.549383</td>\n","      <td>1.327454</td>\n","      <td>-0.858694</td>\n","      <td>-0.407194</td>\n","      <td>-1.380849</td>\n","      <td>-0.484072</td>\n","      <td>0.053216</td>\n","      <td>-0.566188</td>\n","      <td>2.077048</td>\n","      <td>-1.713168</td>\n","      <td>-1.023706</td>\n","      <td>-0.876756</td>\n","      <td>-1.181412</td>\n","      <td>0.554549</td>\n","      <td>-0.927228</td>\n","      <td>1.000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.306382</td>\n","      <td>-0.220321</td>\n","      <td>1.258813</td>\n","      <td>-1.077816</td>\n","      <td>-0.794022</td>\n","      <td>-1.321162</td>\n","      <td>0.034569</td>\n","      <td>-0.028300</td>\n","      <td>0.852253</td>\n","      <td>0.843115</td>\n","      <td>-1.852482</td>\n","      <td>-0.873878</td>\n","      <td>-0.747809</td>\n","      <td>-1.075934</td>\n","      <td>0.554549</td>\n","      <td>0.188691</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.121880</td>\n","      <td>-0.507502</td>\n","      <td>1.602019</td>\n","      <td>-0.899279</td>\n","      <td>-0.145156</td>\n","      <td>-1.428323</td>\n","      <td>-0.571244</td>\n","      <td>-0.156868</td>\n","      <td>-1.210127</td>\n","      <td>0.206345</td>\n","      <td>-1.607023</td>\n","      <td>-0.976817</td>\n","      <td>-0.829843</td>\n","      <td>-1.199352</td>\n","      <td>0.554549</td>\n","      <td>0.188691</td>\n","      <td>1.667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1233</th>\n","      <td>0.255364</td>\n","      <td>-0.381860</td>\n","      <td>0.582571</td>\n","      <td>-0.759946</td>\n","      <td>0.019377</td>\n","      <td>-1.308736</td>\n","      <td>1.991546</td>\n","      <td>2.685402</td>\n","      <td>1.199257</td>\n","      <td>-0.701586</td>\n","      <td>-0.159143</td>\n","      <td>3.067461</td>\n","      <td>2.241903</td>\n","      <td>1.375849</td>\n","      <td>-0.113638</td>\n","      <td>-0.927228</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1234</th>\n","      <td>0.077385</td>\n","      <td>0.060878</td>\n","      <td>0.407155</td>\n","      <td>-1.068928</td>\n","      <td>-0.609823</td>\n","      <td>-1.455511</td>\n","      <td>2.317970</td>\n","      <td>2.777407</td>\n","      <td>1.673972</td>\n","      <td>-0.951420</td>\n","      <td>-1.001667</td>\n","      <td>1.128244</td>\n","      <td>-0.907326</td>\n","      <td>1.372802</td>\n","      <td>-0.113638</td>\n","      <td>-0.927228</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1235</th>\n","      <td>0.144127</td>\n","      <td>0.013015</td>\n","      <td>0.475796</td>\n","      <td>-0.997435</td>\n","      <td>-0.387425</td>\n","      <td>-1.417065</td>\n","      <td>2.222959</td>\n","      <td>2.773212</td>\n","      <td>1.602987</td>\n","      <td>-0.869158</td>\n","      <td>-0.940302</td>\n","      <td>0.971931</td>\n","      <td>-0.895535</td>\n","      <td>0.357342</td>\n","      <td>-0.113638</td>\n","      <td>-0.927228</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1236</th>\n","      <td>0.199745</td>\n","      <td>-0.286133</td>\n","      <td>0.763072</td>\n","      <td>-0.862446</td>\n","      <td>-0.148348</td>\n","      <td>-1.406657</td>\n","      <td>1.778633</td>\n","      <td>2.172331</td>\n","      <td>1.461333</td>\n","      <td>-0.835643</td>\n","      <td>-0.936985</td>\n","      <td>1.153752</td>\n","      <td>-1.092771</td>\n","      <td>0.245531</td>\n","      <td>-0.113638</td>\n","      <td>-0.927228</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>1237</th>\n","      <td>0.277611</td>\n","      <td>-0.250235</td>\n","      <td>0.661381</td>\n","      <td>-0.844869</td>\n","      <td>-0.106340</td>\n","      <td>-1.388071</td>\n","      <td>1.962070</td>\n","      <td>2.141463</td>\n","      <td>1.535487</td>\n","      <td>-0.774708</td>\n","      <td>0.459481</td>\n","      <td>1.205412</td>\n","      <td>0.913035</td>\n","      <td>0.226308</td>\n","      <td>-0.113638</td>\n","      <td>-0.927228</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1238 rows × 17 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5be00acb-3450-4a79-b183-a8d125a7df59')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5be00acb-3450-4a79-b183-a8d125a7df59 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5be00acb-3450-4a79-b183-a8d125a7df59');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-358b0fdb-327f-4a17-a069-c51b2ff1194a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-358b0fdb-327f-4a17-a069-c51b2ff1194a')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-358b0fdb-327f-4a17-a069-c51b2ff1194a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Define the sequence length and batch size\n","sequence_length = 3\n","batch_size = 32"],"metadata":{"id":"9W5DOOXNoZ7a","executionInfo":{"status":"ok","timestamp":1696744883400,"user_tz":-330,"elapsed":8,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Define the target variable\n","target = \"Kp_value\""],"metadata":{"id":"SDWCRHfKtg4y","executionInfo":{"status":"ok","timestamp":1696744883400,"user_tz":-330,"elapsed":7,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# Split the data into training and test sets\n","train_size = int(final_dataframe.shape[0] * 0.8)\n","train_data = final_dataframe.iloc[:train_size]\n","test_data = final_dataframe.iloc[train_size:]"],"metadata":{"id":"QpEc-uZdtmig","executionInfo":{"status":"ok","timestamp":1696744883400,"user_tz":-330,"elapsed":7,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Prepare the training and testing data for LSTM\n","X_train, y_train = create_dataset(train_data.drop(target, axis=1), train_data[target], sequence_length)\n","X_test, y_test = create_dataset(test_data.drop(target, axis=1), test_data[target], sequence_length)"],"metadata":{"id":"2e9ZqD-Ptu68","executionInfo":{"status":"ok","timestamp":1696744884108,"user_tz":-330,"elapsed":20,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["print(f\"Shape of training data: {X_train.shape}, {y_train.shape}\")\n","print(f\"Shape of testing data: {X_test.shape}, {y_test.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hdHAHxgxt0gN","executionInfo":{"status":"ok","timestamp":1696744884109,"user_tz":-330,"elapsed":16,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"62b659a9-bc9d-4a79-b70c-3d1e265711d9"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of training data: (987, 3, 16), (987,)\n","Shape of testing data: (245, 3, 16), (245,)\n"]}]},{"cell_type":"code","source":["# Get the number of features (input_dim) for LSTM\n","n_features = train_data.drop(target, axis=1).shape[1]"],"metadata":{"id":"Om4pUYPpt4GX","executionInfo":{"status":"ok","timestamp":1696744884110,"user_tz":-330,"elapsed":13,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras import Sequential\n","from tensorflow.keras.layers import LSTM, Dropout, Dense, BatchNormalization\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.optimizers.schedules import ExponentialDecay\n","from tensorflow.keras import regularizers"],"metadata":{"id":"PgSmOLU5t6ai","executionInfo":{"status":"ok","timestamp":1696744890398,"user_tz":-330,"elapsed":5528,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["model = Sequential()\n","\n","# # First LSTM layer with Dropout regularisation and Batch Normalization\n","# model.add(LSTM(200, activation='relu', return_sequences=True, input_shape=(sequence_length, n_features), kernel_initializer='he_uniform'))\n","# model.add(Dropout(0.2))\n","# model.add(BatchNormalization())\n","\n","# # Second LSTM layer\n","# model.add(LSTM(150, activation='relu', return_sequences=True, kernel_regularizer=regularizers.l2(0.001), kernel_initializer='he_uniform'))\n","# model.add(Dropout(0.2))\n","# model.add(BatchNormalization())\n","# # Third LSTM layer\n","# model.add(LSTM(100, activation='relu', return_sequences=True, kernel_regularizer=regularizers.l2(0.001), kernel_initializer='he_uniform'))\n","# model.add(Dropout(0.2))\n","# model.add(BatchNormalization())\n","# # Fourth LSTM layer\n","# model.add(LSTM(50, activation='relu', kernel_initializer='he_uniform'))\n","# model.add(Dropout(0.2))\n","# model.add(BatchNormalization())\n","\n","model.add(LSTM(50, input_shape=(sequence_length, n_features),return_sequences=True))\n","model.add(LSTM(512, activation='relu',return_sequences=True))\n","model.add(Dropout(0.2))\n","model.add(LSTM(1024, activation='relu',return_sequences=True))\n","model.add(Dropout(0.2))\n","model.add(LSTM(1024, activation='relu',return_sequences=True))\n","model.add(Dropout(0.2))\n","model.add(LSTM(32, activation='relu',return_sequences=False))\n","model.add(Dense(1))\n","\n","import keras\n","model.compile(loss=keras.losses.MeanSquaredError(), optimizer=keras.optimizers.Adam(),metrics=[keras.metrics.MeanAbsoluteError()])\n","model.summary()\n","# The output layer\n","\n","# # Compiling the LSTM\n","# initial_learning_rate = 0.003\n","# decay_rate = 0.90\n","# decay_steps = 12000\n","\n","# lr_schedule = ExponentialDecay(\n","#     initial_learning_rate,\n","#     decay_steps=decay_steps,\n","#     decay_rate=decay_rate,\n","#     staircase=True)\n","\n","# # Adam optimizer with learning rate schedule and epsilon set to a slightly higher value\n","# optimizer = Adam(\n","#     learning_rate=lr_schedule,\n","#     beta_1=0.9,\n","#     beta_2=0.999,\n","#     epsilon=1e-07, # changed epsilon from 1e-05 to 1e-07 for better precision\n","#     amsgrad=False,\n","#     name=\"Adam\"\n","# )\n","\n","# model.compile(optimizer=optimizer, loss='mse')\n"],"metadata":{"id":"4UrwXUWwt89N","executionInfo":{"status":"ok","timestamp":1696746257680,"user_tz":-330,"elapsed":4892,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fb60b40b-815c-4ddc-a6ea-f61c1ee05099"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Layer lstm_49 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_50 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_51 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_52 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"sequential_12\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_48 (LSTM)              (None, 3, 50)             13400     \n","                                                                 \n"," lstm_49 (LSTM)              (None, 3, 512)            1153024   \n","                                                                 \n"," dropout_48 (Dropout)        (None, 3, 512)            0         \n","                                                                 \n"," lstm_50 (LSTM)              (None, 3, 1024)           6295552   \n","                                                                 \n"," dropout_49 (Dropout)        (None, 3, 1024)           0         \n","                                                                 \n"," lstm_51 (LSTM)              (None, 3, 1024)           8392704   \n","                                                                 \n"," dropout_50 (Dropout)        (None, 3, 1024)           0         \n","                                                                 \n"," lstm_52 (LSTM)              (None, 32)                135296    \n","                                                                 \n"," dense_12 (Dense)            (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 15990009 (61.00 MB)\n","Trainable params: 15990009 (61.00 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["early_stopping=tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=5,mode='min',verbose=1)"],"metadata":{"id":"WRmsrney9Nm5","executionInfo":{"status":"ok","timestamp":1696746262873,"user_tz":-330,"elapsed":11,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":116,"outputs":[]},{"cell_type":"code","source":["hist = model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Ehxv8aDt_0j","executionInfo":{"status":"ok","timestamp":1696746686651,"user_tz":-330,"elapsed":209087,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"8a2a90b0-ca21-4d07-a8e8-96dcdf605817"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","31/31 [==============================] - 13s 68ms/step - loss: 1.9021 - mean_absolute_error: 1.0648 - val_loss: 1.0911 - val_mean_absolute_error: 0.8677\n","Epoch 2/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.8129 - mean_absolute_error: 0.7062 - val_loss: 0.7482 - val_mean_absolute_error: 0.6893\n","Epoch 3/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.7385 - mean_absolute_error: 0.6568 - val_loss: 0.9084 - val_mean_absolute_error: 0.7925\n","Epoch 4/100\n","31/31 [==============================] - 1s 39ms/step - loss: 0.6139 - mean_absolute_error: 0.6058 - val_loss: 0.9298 - val_mean_absolute_error: 0.8009\n","Epoch 5/100\n","31/31 [==============================] - 1s 38ms/step - loss: 0.5737 - mean_absolute_error: 0.5829 - val_loss: 0.9639 - val_mean_absolute_error: 0.8210\n","Epoch 6/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.5594 - mean_absolute_error: 0.5825 - val_loss: 0.7592 - val_mean_absolute_error: 0.7063\n","Epoch 7/100\n","31/31 [==============================] - 2s 49ms/step - loss: 0.5111 - mean_absolute_error: 0.5480 - val_loss: 0.7722 - val_mean_absolute_error: 0.7142\n","Epoch 8/100\n","31/31 [==============================] - 3s 81ms/step - loss: 0.4602 - mean_absolute_error: 0.5204 - val_loss: 0.7313 - val_mean_absolute_error: 0.6859\n","Epoch 9/100\n","31/31 [==============================] - 2s 54ms/step - loss: 0.4171 - mean_absolute_error: 0.4904 - val_loss: 0.8824 - val_mean_absolute_error: 0.7518\n","Epoch 10/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.4239 - mean_absolute_error: 0.5015 - val_loss: 0.6961 - val_mean_absolute_error: 0.6605\n","Epoch 11/100\n","31/31 [==============================] - 2s 52ms/step - loss: 0.4994 - mean_absolute_error: 0.5436 - val_loss: 0.8747 - val_mean_absolute_error: 0.7627\n","Epoch 12/100\n","31/31 [==============================] - 2s 80ms/step - loss: 0.3803 - mean_absolute_error: 0.4696 - val_loss: 0.9686 - val_mean_absolute_error: 0.8138\n","Epoch 13/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.3500 - mean_absolute_error: 0.4548 - val_loss: 1.0666 - val_mean_absolute_error: 0.8402\n","Epoch 14/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.3332 - mean_absolute_error: 0.4458 - val_loss: 0.7560 - val_mean_absolute_error: 0.6921\n","Epoch 15/100\n","31/31 [==============================] - 1s 38ms/step - loss: 0.3053 - mean_absolute_error: 0.4274 - val_loss: 1.1056 - val_mean_absolute_error: 0.8448\n","Epoch 16/100\n","31/31 [==============================] - 2s 77ms/step - loss: 0.2921 - mean_absolute_error: 0.4199 - val_loss: 0.9699 - val_mean_absolute_error: 0.7743\n","Epoch 17/100\n","31/31 [==============================] - 3s 102ms/step - loss: 0.2769 - mean_absolute_error: 0.4060 - val_loss: 0.7992 - val_mean_absolute_error: 0.6956\n","Epoch 18/100\n","31/31 [==============================] - 2s 64ms/step - loss: 0.2780 - mean_absolute_error: 0.4118 - val_loss: 0.9480 - val_mean_absolute_error: 0.7738\n","Epoch 19/100\n","31/31 [==============================] - 2s 54ms/step - loss: 0.2433 - mean_absolute_error: 0.3790 - val_loss: 1.2295 - val_mean_absolute_error: 0.8750\n","Epoch 20/100\n","31/31 [==============================] - 2s 68ms/step - loss: 0.2164 - mean_absolute_error: 0.3633 - val_loss: 0.9928 - val_mean_absolute_error: 0.7810\n","Epoch 21/100\n","31/31 [==============================] - 2s 69ms/step - loss: 0.2228 - mean_absolute_error: 0.3683 - val_loss: 1.0258 - val_mean_absolute_error: 0.8011\n","Epoch 22/100\n","31/31 [==============================] - 2s 53ms/step - loss: 0.2080 - mean_absolute_error: 0.3550 - val_loss: 0.9990 - val_mean_absolute_error: 0.7812\n","Epoch 23/100\n","31/31 [==============================] - 2s 79ms/step - loss: 0.1867 - mean_absolute_error: 0.3361 - val_loss: 1.1605 - val_mean_absolute_error: 0.8310\n","Epoch 24/100\n","31/31 [==============================] - 2s 59ms/step - loss: 0.1857 - mean_absolute_error: 0.3367 - val_loss: 0.9445 - val_mean_absolute_error: 0.7418\n","Epoch 25/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.1822 - mean_absolute_error: 0.3291 - val_loss: 1.0283 - val_mean_absolute_error: 0.7876\n","Epoch 26/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.1764 - mean_absolute_error: 0.3317 - val_loss: 0.9916 - val_mean_absolute_error: 0.7515\n","Epoch 27/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.1605 - mean_absolute_error: 0.3096 - val_loss: 0.9157 - val_mean_absolute_error: 0.7521\n","Epoch 28/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.1560 - mean_absolute_error: 0.3100 - val_loss: 1.2025 - val_mean_absolute_error: 0.8515\n","Epoch 29/100\n","31/31 [==============================] - 1s 39ms/step - loss: 0.1583 - mean_absolute_error: 0.3106 - val_loss: 0.9701 - val_mean_absolute_error: 0.7519\n","Epoch 30/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.1198 - mean_absolute_error: 0.2688 - val_loss: 1.0172 - val_mean_absolute_error: 0.7655\n","Epoch 31/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.1336 - mean_absolute_error: 0.2900 - val_loss: 0.9886 - val_mean_absolute_error: 0.7704\n","Epoch 32/100\n","31/31 [==============================] - 2s 68ms/step - loss: 0.1191 - mean_absolute_error: 0.2710 - val_loss: 0.9717 - val_mean_absolute_error: 0.7707\n","Epoch 33/100\n","31/31 [==============================] - 2s 80ms/step - loss: 0.1135 - mean_absolute_error: 0.2604 - val_loss: 1.1690 - val_mean_absolute_error: 0.8365\n","Epoch 34/100\n","31/31 [==============================] - 2s 51ms/step - loss: 0.0964 - mean_absolute_error: 0.2418 - val_loss: 1.1162 - val_mean_absolute_error: 0.8242\n","Epoch 35/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.1031 - mean_absolute_error: 0.2489 - val_loss: 0.9994 - val_mean_absolute_error: 0.7776\n","Epoch 36/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0919 - mean_absolute_error: 0.2327 - val_loss: 1.1202 - val_mean_absolute_error: 0.8131\n","Epoch 37/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0943 - mean_absolute_error: 0.2415 - val_loss: 1.1226 - val_mean_absolute_error: 0.8134\n","Epoch 38/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0834 - mean_absolute_error: 0.2299 - val_loss: 1.1096 - val_mean_absolute_error: 0.8224\n","Epoch 39/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0794 - mean_absolute_error: 0.2143 - val_loss: 1.1830 - val_mean_absolute_error: 0.8337\n","Epoch 40/100\n","31/31 [==============================] - 1s 39ms/step - loss: 0.0883 - mean_absolute_error: 0.2330 - val_loss: 0.9933 - val_mean_absolute_error: 0.7826\n","Epoch 41/100\n","31/31 [==============================] - 2s 50ms/step - loss: 0.0849 - mean_absolute_error: 0.2235 - val_loss: 1.1777 - val_mean_absolute_error: 0.8398\n","Epoch 42/100\n","31/31 [==============================] - 3s 81ms/step - loss: 0.0835 - mean_absolute_error: 0.2272 - val_loss: 1.3059 - val_mean_absolute_error: 0.8922\n","Epoch 43/100\n","31/31 [==============================] - 2s 61ms/step - loss: 0.0712 - mean_absolute_error: 0.2093 - val_loss: 1.1250 - val_mean_absolute_error: 0.8346\n","Epoch 44/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0806 - mean_absolute_error: 0.2192 - val_loss: 1.0856 - val_mean_absolute_error: 0.8276\n","Epoch 45/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0723 - mean_absolute_error: 0.2100 - val_loss: 1.1342 - val_mean_absolute_error: 0.8312\n","Epoch 46/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0543 - mean_absolute_error: 0.1827 - val_loss: 1.0447 - val_mean_absolute_error: 0.8062\n","Epoch 47/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0515 - mean_absolute_error: 0.1790 - val_loss: 1.1770 - val_mean_absolute_error: 0.8623\n","Epoch 48/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0496 - mean_absolute_error: 0.1706 - val_loss: 1.1259 - val_mean_absolute_error: 0.8281\n","Epoch 49/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0548 - mean_absolute_error: 0.1811 - val_loss: 1.1517 - val_mean_absolute_error: 0.8517\n","Epoch 50/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0510 - mean_absolute_error: 0.1782 - val_loss: 1.1281 - val_mean_absolute_error: 0.8418\n","Epoch 51/100\n","31/31 [==============================] - 2s 69ms/step - loss: 0.0520 - mean_absolute_error: 0.1775 - val_loss: 1.0765 - val_mean_absolute_error: 0.8065\n","Epoch 52/100\n","31/31 [==============================] - 2s 80ms/step - loss: 0.0493 - mean_absolute_error: 0.1764 - val_loss: 1.1568 - val_mean_absolute_error: 0.8398\n","Epoch 53/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0479 - mean_absolute_error: 0.1710 - val_loss: 1.1318 - val_mean_absolute_error: 0.8420\n","Epoch 54/100\n","31/31 [==============================] - 1s 46ms/step - loss: 0.0411 - mean_absolute_error: 0.1568 - val_loss: 0.9887 - val_mean_absolute_error: 0.7889\n","Epoch 55/100\n","31/31 [==============================] - 1s 43ms/step - loss: 0.0409 - mean_absolute_error: 0.1563 - val_loss: 0.9948 - val_mean_absolute_error: 0.7817\n","Epoch 56/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0367 - mean_absolute_error: 0.1505 - val_loss: 1.1422 - val_mean_absolute_error: 0.8473\n","Epoch 57/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0412 - mean_absolute_error: 0.1567 - val_loss: 1.1049 - val_mean_absolute_error: 0.8237\n","Epoch 58/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0388 - mean_absolute_error: 0.1519 - val_loss: 1.0578 - val_mean_absolute_error: 0.8034\n","Epoch 59/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0458 - mean_absolute_error: 0.1657 - val_loss: 1.1535 - val_mean_absolute_error: 0.8538\n","Epoch 60/100\n","31/31 [==============================] - 2s 64ms/step - loss: 0.0442 - mean_absolute_error: 0.1618 - val_loss: 1.1369 - val_mean_absolute_error: 0.8500\n","Epoch 61/100\n","31/31 [==============================] - 3s 86ms/step - loss: 0.0405 - mean_absolute_error: 0.1562 - val_loss: 1.0455 - val_mean_absolute_error: 0.8142\n","Epoch 62/100\n","31/31 [==============================] - 1s 43ms/step - loss: 0.0391 - mean_absolute_error: 0.1511 - val_loss: 1.1307 - val_mean_absolute_error: 0.8393\n","Epoch 63/100\n","31/31 [==============================] - 2s 60ms/step - loss: 0.0350 - mean_absolute_error: 0.1465 - val_loss: 1.0798 - val_mean_absolute_error: 0.8213\n","Epoch 64/100\n","31/31 [==============================] - 2s 59ms/step - loss: 0.0392 - mean_absolute_error: 0.1515 - val_loss: 0.9939 - val_mean_absolute_error: 0.7888\n","Epoch 65/100\n","31/31 [==============================] - 1s 43ms/step - loss: 0.0395 - mean_absolute_error: 0.1537 - val_loss: 1.0766 - val_mean_absolute_error: 0.8175\n","Epoch 66/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0280 - mean_absolute_error: 0.1297 - val_loss: 1.1041 - val_mean_absolute_error: 0.8303\n","Epoch 67/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0264 - mean_absolute_error: 0.1264 - val_loss: 1.1089 - val_mean_absolute_error: 0.8371\n","Epoch 68/100\n","31/31 [==============================] - 2s 49ms/step - loss: 0.0255 - mean_absolute_error: 0.1244 - val_loss: 1.1713 - val_mean_absolute_error: 0.8557\n","Epoch 69/100\n","31/31 [==============================] - 3s 84ms/step - loss: 0.0282 - mean_absolute_error: 0.1299 - val_loss: 1.1184 - val_mean_absolute_error: 0.8357\n","Epoch 70/100\n","31/31 [==============================] - 2s 66ms/step - loss: 0.0235 - mean_absolute_error: 0.1192 - val_loss: 1.0288 - val_mean_absolute_error: 0.8030\n","Epoch 71/100\n","31/31 [==============================] - 1s 45ms/step - loss: 0.0276 - mean_absolute_error: 0.1278 - val_loss: 0.9965 - val_mean_absolute_error: 0.7824\n","Epoch 72/100\n","31/31 [==============================] - 1s 43ms/step - loss: 0.0265 - mean_absolute_error: 0.1264 - val_loss: 1.1071 - val_mean_absolute_error: 0.8309\n","Epoch 73/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0220 - mean_absolute_error: 0.1153 - val_loss: 1.1410 - val_mean_absolute_error: 0.8467\n","Epoch 74/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0232 - mean_absolute_error: 0.1182 - val_loss: 1.1425 - val_mean_absolute_error: 0.8394\n","Epoch 75/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0209 - mean_absolute_error: 0.1122 - val_loss: 1.0931 - val_mean_absolute_error: 0.8223\n","Epoch 76/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0202 - mean_absolute_error: 0.1103 - val_loss: 1.0849 - val_mean_absolute_error: 0.8202\n","Epoch 77/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0246 - mean_absolute_error: 0.1215 - val_loss: 1.1685 - val_mean_absolute_error: 0.8640\n","Epoch 78/100\n","31/31 [==============================] - 3s 88ms/step - loss: 0.0238 - mean_absolute_error: 0.1186 - val_loss: 1.1444 - val_mean_absolute_error: 0.8517\n","Epoch 79/100\n","31/31 [==============================] - 2s 70ms/step - loss: 0.0241 - mean_absolute_error: 0.1194 - val_loss: 1.1567 - val_mean_absolute_error: 0.8474\n","Epoch 80/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0202 - mean_absolute_error: 0.1076 - val_loss: 1.2728 - val_mean_absolute_error: 0.8980\n","Epoch 81/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0253 - mean_absolute_error: 0.1238 - val_loss: 1.0269 - val_mean_absolute_error: 0.7999\n","Epoch 82/100\n","31/31 [==============================] - 1s 44ms/step - loss: 0.0222 - mean_absolute_error: 0.1149 - val_loss: 1.1611 - val_mean_absolute_error: 0.8554\n","Epoch 83/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0199 - mean_absolute_error: 0.1070 - val_loss: 1.1256 - val_mean_absolute_error: 0.8419\n","Epoch 84/100\n","31/31 [==============================] - 1s 46ms/step - loss: 0.0180 - mean_absolute_error: 0.1024 - val_loss: 1.0740 - val_mean_absolute_error: 0.8203\n","Epoch 85/100\n","31/31 [==============================] - 2s 52ms/step - loss: 0.0187 - mean_absolute_error: 0.1049 - val_loss: 1.1442 - val_mean_absolute_error: 0.8392\n","Epoch 86/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0192 - mean_absolute_error: 0.1074 - val_loss: 1.1865 - val_mean_absolute_error: 0.8650\n","Epoch 87/100\n","31/31 [==============================] - 3s 85ms/step - loss: 0.0176 - mean_absolute_error: 0.1029 - val_loss: 1.0813 - val_mean_absolute_error: 0.8250\n","Epoch 88/100\n","31/31 [==============================] - 2s 69ms/step - loss: 0.0195 - mean_absolute_error: 0.1053 - val_loss: 1.1342 - val_mean_absolute_error: 0.8408\n","Epoch 89/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0178 - mean_absolute_error: 0.1030 - val_loss: 1.0733 - val_mean_absolute_error: 0.8156\n","Epoch 90/100\n","31/31 [==============================] - 1s 41ms/step - loss: 0.0183 - mean_absolute_error: 0.1025 - val_loss: 1.1843 - val_mean_absolute_error: 0.8701\n","Epoch 91/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0176 - mean_absolute_error: 0.1019 - val_loss: 1.1553 - val_mean_absolute_error: 0.8547\n","Epoch 92/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0151 - mean_absolute_error: 0.0938 - val_loss: 1.0893 - val_mean_absolute_error: 0.8230\n","Epoch 93/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0194 - mean_absolute_error: 0.1070 - val_loss: 1.1145 - val_mean_absolute_error: 0.8394\n","Epoch 94/100\n","31/31 [==============================] - 1s 40ms/step - loss: 0.0176 - mean_absolute_error: 0.1016 - val_loss: 1.0917 - val_mean_absolute_error: 0.8284\n","Epoch 95/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0153 - mean_absolute_error: 0.0941 - val_loss: 1.2188 - val_mean_absolute_error: 0.8823\n","Epoch 96/100\n","31/31 [==============================] - 2s 63ms/step - loss: 0.0178 - mean_absolute_error: 0.1029 - val_loss: 1.1275 - val_mean_absolute_error: 0.8487\n","Epoch 97/100\n","31/31 [==============================] - 3s 82ms/step - loss: 0.0189 - mean_absolute_error: 0.1064 - val_loss: 1.0579 - val_mean_absolute_error: 0.8179\n","Epoch 98/100\n","31/31 [==============================] - 1s 47ms/step - loss: 0.0177 - mean_absolute_error: 0.1000 - val_loss: 0.9946 - val_mean_absolute_error: 0.7818\n","Epoch 99/100\n","31/31 [==============================] - 1s 43ms/step - loss: 0.0271 - mean_absolute_error: 0.1253 - val_loss: 1.1627 - val_mean_absolute_error: 0.8530\n","Epoch 100/100\n","31/31 [==============================] - 1s 42ms/step - loss: 0.0229 - mean_absolute_error: 0.1156 - val_loss: 1.1242 - val_mean_absolute_error: 0.8277\n"]}]},{"cell_type":"code","source":["plt.plot(hist.history['loss'])\n","plt.plot(hist.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"9SLBZPsD-Puw","executionInfo":{"status":"ok","timestamp":1696746686651,"user_tz":-330,"elapsed":29,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"2d9bd246-723d-4941-c7a3-57251bb2a0b6"},"execution_count":119,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACHpUlEQVR4nO3dd3iT5foH8G+SJuluKd1QoOxdliBDRa0CIgou5KgMBX/H48IeFw5wHVGPeFBB8LjQ41YUFRRFpuy9Z6Hs7tLdpk3y/v548ma0SZu0ad6O7+e6eiVN3r55Ekpz577v53lUkiRJICIiImpB1EoPgIiIiMjXGAARERFRi8MAiIiIiFocBkBERETU4jAAIiIiohaHARARERG1OAyAiIiIqMVhAEREREQtDgMgIiIianEYABFRk3f69GmoVCosWbLE459dt24dVCoV1q1bV+NxS5YsgUqlwunTp+s0RiJqXBgAERERUYvDAIiIiIhaHAZARERE1OIwACKienvhhRegUqlw/Phx3H333QgLC0NUVBSef/55SJKEc+fO4eabb0ZoaChiY2Mxb968aufIysrCfffdh5iYGPj7+yMpKQmffvpptePy8/MxdepUhIWFITw8HFOmTEF+fr7TcR09ehS33XYbIiIi4O/vj0GDBuHnn3/26nN/77330KtXL+j1esTHx+PBBx+sNp4TJ07g1ltvRWxsLPz9/dG2bVvceeedKCgosB6zatUqjBgxAuHh4QgODka3bt3wzDPPeHWsRGTjp/QAiKj5mDhxInr06IHXXnsNK1aswCuvvIKIiAi8//77uOaaa/D666/jiy++wOOPP47LLrsMV155JQCgrKwMI0eORGpqKh566CEkJibiu+++w9SpU5Gfn49HH30UACBJEm6++WZs3LgRf//739GjRw/8+OOPmDJlSrWxHDp0CMOHD0ebNm3w9NNPIygoCN9++y3Gjx+PpUuXYsKECfV+vi+88AJefPFFJCcn44EHHsCxY8ewaNEi7NixA5s2bYJWq0VFRQVGjRoFg8GAhx9+GLGxsbhw4QKWL1+O/Px8hIWF4dChQ7jxxhvRt29fvPTSS9Dr9UhNTcWmTZvqPUYickEiIqqnOXPmSACk+++/33qb0WiU2rZtK6lUKum1116z3n7p0iUpICBAmjJlivW2+fPnSwCkzz//3HpbRUWFNHTo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SyIiIvcwAPICSZJQWmGs9au80oTyShNKDSa3jq/tS5Ikt8f49ttvY+jQoZgxYwbS09ORnp6OhIQEAMDTTz+N1157DUeOHEHfvn1RXFyMG264AatXr8aePXswevRojBs3DmfPnq3xMV588UXccccd2L9/P2644QbcddddyMvLq9drS0RE1BBYAvOCskoTes7+3eePe/ilUQjUufdPGBYWBp1Oh8DAQMTGxgIAjh49CgB46aWXcN1111mPjYiIQFJSkvX7l19+GT/++CN+/vlnPPTQQy4fY+rUqZg0aRIA4NVXX8U777yD7du3Y/To0R4/NyIioobEDBBh0KBBDt8XFxfj8ccfR48ePRAeHo7g4GAcOXKk1gxQ3759rdeDgoIQGhqKrKysBhkzERFRfTAD5AUBWg0OvzSq1uMulVTgQn4ZQvRatI+s/0rSAVpNvc8BoNpsrscffxyrVq3Cm2++ic6dOyMgIAC33XYbKioqajxP1S0tVCoVzGazV8ZIRETkTQyAvEClUrlVijJUmuGv1cBfp3G7dOVNOp3Ora0nNm3ahKlTp2LChAkAREbo9OnTDTw6IiIi32EJzIfk3R88aV72pg4dOmDbtm04ffo0cnJyXGZnunTpgh9++AF79+7Fvn378Le//Y2ZHCIialYYAPmQvP+VQvEPHn/8cWg0GvTs2RNRUVEue3reeusttGrVCsOGDcO4ceMwatQoDBgwwMejJSIiajgqSal0RCNWWFiIsLAwFBQUIDQ01OG+8vJypKWlITExEf7+/p6dt6wSp3NLEKjToHN0iDeH3OTU53UkIiJypqb376qYAfIhuQRmZshJRESkKAZAPqR0CYyIiIgEBkA+ZEkAQQIjICIiIiUxAPIh2ywwZcdBRETU0jEA8iGWwIiIiBoHBkA+xBIYERFR48AAyIfULIERERE1CgyAfEgFlsCIiIgaAwZAPmRtgoak2HYYRERExADIp+QACAC7gIiIiBTEAMiHVLBFQEokgEaOHImZM2d67XxTp07F+PHjvXY+IiIiX2EA5EMOGSCWwIiIiBTDAMiHVCqV3VR435o6dSrWr1+Pt99+W4xDpcLp06dx8OBBjBkzBsHBwYiJicE999yDnJwc6899//336NOnDwICAtC6dWskJyejpKQEL7zwAj799FP89NNP1vOtW7fOx8+KiIiobvyUHkCzIElA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J05EdnY2Zs+ejYyMDPTr1w8rV660NjGfPXsWarUtUTVs2DB8+eWXeO655/DMM8+gS5cuWLZsmXUNIAB48sknUVJSgvvvvx/5+fkYMWIEVq5cyTWAiIiICEAjWAeoMeI6QERERE2PJ+/fnAVGRERELQ4DICIiImpxGAARERFRi8MAiIiIiFocBkBERETU4jAAIiIiohaHARARERG1OIovhNgYyUsjcVd4IiKipkN+33ZniUMGQE4UFRUBAHeFJyIiaoKKiooQFhZW4zFcCdoJs9mMixcvIiQkBCqVyqvnLiwsREJCAs6dO8dVphsYX2vf4WvtO3ytfYevte9467WWJAlFRUWIj4932EbLGWaAnFCr1Wjbtm2DPgZ3nfcdvta+w9fad/ha+w5fa9/xxmtdW+ZHxiZoIiIianEYABEREVGLwwDIx/R6PebMmQO9Xq/0UJo9vta+w9fad/ha+w5fa99R4rVmEzQRERG1OMwAERERUYvDAIiIiIhaHAZARERE1OIwACIiIqIWhwGQDy1cuBAdOnSAv78/hgwZgu3btys9pCZv7ty5uOyyyxASEoLo6GiMHz8ex44dczimvLwcDz74IFq3bo3g4GDceuutyMzMVGjEzcdrr70GlUqFmTNnWm/ja+09Fy5cwN13343WrVsjICAAffr0wc6dO633S5KE2bNnIy4uDgEBAUhOTsaJEycUHHHTZDKZ8PzzzyMxMREBAQHo1KkTXn75ZYe9pPha182GDRswbtw4xMfHQ6VSYdmyZQ73u/O65uXl4a677kJoaCjCw8Nx3333obi42CvjYwDkI9988w1SUlIwZ84c7N69G0lJSRg1ahSysrKUHlqTtn79ejz44IPYunUrVq1ahcrKSlx//fUoKSmxHvPYY4/hl19+wXfffYf169fj4sWLuOWWWxQcddO3Y8cOvP/+++jbt6/D7XytvePSpUsYPnw4tFotfvvtNxw+fBjz5s1Dq1atrMe88cYbeOedd7B48WJs27YNQUFBGDVqFMrLyxUcedPz+uuvY9GiRViwYAGOHDmC119/HW+88Qbeffdd6zF8reumpKQESUlJWLhwodP73Xld77rrLhw6dAirVq3C8uXLsWHDBtx///3eGaBEPjF48GDpwQcftH5vMpmk+Ph4ae7cuQqOqvnJysqSAEjr16+XJEmS8vPzJa1WK3333XfW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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Set up early stopping and model checkpointing\n","es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)\n","mc = ModelCheckpoint('/content/drive/MyDrive/NASA Hackathon/Models/hourly_lstm_ashish.h5', monitor='val_loss', mode='min', save_best_only=True)"],"metadata":{"id":"bR1qRHAkuBxv","executionInfo":{"status":"ok","timestamp":1696745909576,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":["# Fit the model\n","history = model.fit(X_train, y_train, epochs=30, validation_data=(X_test, y_test), callbacks=[es, mc], batch_size=32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IIIUqJx6uYNf","executionInfo":{"status":"ok","timestamp":1696745960218,"user_tz":-330,"elapsed":50645,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"2cc4b81b-4749-4ab6-fd47-2eb5dceec617"},"execution_count":111,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","31/31 [==============================] - 11s 73ms/step - loss: 6.1882 - val_loss: 3.8257\n","Epoch 2/30\n","31/31 [==============================] - 1s 42ms/step - loss: 4.1076 - val_loss: 3.0596\n","Epoch 3/30\n","31/31 [==============================] - 1s 39ms/step - loss: 3.3443 - val_loss: 2.8052\n","Epoch 4/30\n","31/31 [==============================] - 1s 47ms/step - loss: 3.0655 - val_loss: 2.7803\n","Epoch 5/30\n","31/31 [==============================] - 2s 78ms/step - loss: 2.8278 - val_loss: 2.6915\n","Epoch 6/30\n","31/31 [==============================] - 2s 58ms/step - loss: 2.6831 - val_loss: 2.7995\n","Epoch 7/30\n","31/31 [==============================] - 1s 36ms/step - loss: 2.5182 - val_loss: 2.9663\n","Epoch 8/30\n","31/31 [==============================] - 1s 41ms/step - loss: 2.4052 - val_loss: 2.5677\n","Epoch 9/30\n","31/31 [==============================] - 1s 34ms/step - loss: 2.3114 - val_loss: 2.6337\n","Epoch 10/30\n","31/31 [==============================] - 1s 39ms/step - loss: 2.2001 - val_loss: 2.4911\n","Epoch 11/30\n","31/31 [==============================] - 1s 38ms/step - loss: 2.1422 - val_loss: 2.5441\n","Epoch 12/30\n","31/31 [==============================] - 1s 33ms/step - loss: 1.9722 - val_loss: 2.5279\n","Epoch 13/30\n","31/31 [==============================] - 1s 38ms/step - loss: 1.9126 - val_loss: 2.4092\n","Epoch 14/30\n","31/31 [==============================] - 1s 39ms/step - loss: 1.8552 - val_loss: 2.2986\n","Epoch 15/30\n","31/31 [==============================] - 2s 63ms/step - loss: 1.7380 - val_loss: 2.3041\n","Epoch 16/30\n","31/31 [==============================] - 2s 76ms/step - loss: 1.6918 - val_loss: 2.2021\n","Epoch 17/30\n","31/31 [==============================] - 1s 44ms/step - loss: 1.6216 - val_loss: 2.0425\n","Epoch 18/30\n","31/31 [==============================] - 1s 35ms/step - loss: 1.5176 - val_loss: 2.0822\n","Epoch 19/30\n","31/31 [==============================] - 1s 35ms/step - loss: 1.4690 - val_loss: 2.2262\n","Epoch 20/30\n","31/31 [==============================] - 1s 34ms/step - loss: 1.4298 - val_loss: 2.3901\n","Epoch 21/30\n","31/31 [==============================] - 1s 35ms/step - loss: 1.3761 - val_loss: 2.2535\n","Epoch 22/30\n","31/31 [==============================] - 1s 37ms/step - loss: 1.3154 - val_loss: 2.1661\n","Epoch 23/30\n","31/31 [==============================] - 1s 42ms/step - loss: 1.2708 - val_loss: 1.8569\n","Epoch 24/30\n","31/31 [==============================] - 1s 36ms/step - loss: 1.1971 - val_loss: 1.8811\n","Epoch 25/30\n","31/31 [==============================] - 1s 44ms/step - loss: 1.1756 - val_loss: 1.7573\n","Epoch 26/30\n","31/31 [==============================] - 2s 71ms/step - loss: 1.1068 - val_loss: 1.7884\n","Epoch 27/30\n","31/31 [==============================] - 2s 65ms/step - loss: 1.0881 - val_loss: 1.7856\n","Epoch 28/30\n","31/31 [==============================] - 1s 37ms/step - loss: 1.0497 - val_loss: 1.8436\n","Epoch 29/30\n","31/31 [==============================] - 1s 40ms/step - loss: 1.0124 - val_loss: 1.7121\n","Epoch 30/30\n","31/31 [==============================] - 1s 42ms/step - loss: 0.9390 - val_loss: 1.6125\n"]}]},{"cell_type":"code","source":["# Plot the loss curve\n","plt.figure(figsize=(10, 6))\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Validation'], loc='upper right')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"Y6C79ON5umzH","executionInfo":{"status":"ok","timestamp":1696745961282,"user_tz":-330,"elapsed":13,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"outputId":"52effbfe-c8fc-44bc-8763-da82a00bc15c"},"execution_count":112,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import tensorflow as tf\n"],"metadata":{"id":"1-6_q07kvayJ","executionInfo":{"status":"ok","timestamp":1696745961283,"user_tz":-330,"elapsed":11,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":113,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import load_model\n","\n","# Load the saved model\n","model = load_model('/content/drive/MyDrive/NASA Hackathon/Models/hourly_lstm_ashish.h5')"],"metadata":{"id":"VXfrnsDRvIkz","executionInfo":{"status":"ok","timestamp":1696745962049,"user_tz":-330,"elapsed":776,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1a136b2d-4768-4471-8288-6ba787af2f02"},"execution_count":114,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Layer lstm_44 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_45 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_46 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n","WARNING:tensorflow:Layer lstm_47 will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"3hZ7fV-MyC8f","executionInfo":{"status":"ok","timestamp":1696745962050,"user_tz":-330,"elapsed":15,"user":{"displayName":"Ashish ladhani","userId":"07187462949623235066"}}},"execution_count":114,"outputs":[]}]}